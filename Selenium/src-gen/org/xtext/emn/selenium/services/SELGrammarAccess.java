/*
 * generated by Xtext
 */
package org.xtext.emn.selenium.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SELGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSequencesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSequencesSequenceParserRuleCall_0_0 = (RuleCall)cSequencesAssignment_0.eContents().get(0);
		private final Assignment cTestsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTestsTestParserRuleCall_1_0 = (RuleCall)cTestsAssignment_1.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////////////////
		//// PROGRAM /////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////
		//Program:
		//	(sequences+=Sequence | tests+=Test)*;
		@Override public ParserRule getRule() { return rule; }

		//(sequences+=Sequence | tests+=Test)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//sequences+=Sequence
		public Assignment getSequencesAssignment_0() { return cSequencesAssignment_0; }

		//Sequence
		public RuleCall getSequencesSequenceParserRuleCall_0_0() { return cSequencesSequenceParserRuleCall_0_0; }

		//tests+=Test
		public Assignment getTestsAssignment_1() { return cTestsAssignment_1; }

		//Test
		public RuleCall getTestsTestParserRuleCall_1_0() { return cTestsTestParserRuleCall_1_0; }
	}

	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBrowserAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBrowserSTRINGTerminalRuleCall_1_0 = (RuleCall)cBrowserAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyInstructionParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//////////////////////////////////////////////////////////////////////////////
		//// MAIN INSTRUCTIONS ///////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////
		//Test:
		//	"Test" browser=STRING "{" body+=Instruction* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Test" browser=STRING "{" body+=Instruction* "}"
		public Group getGroup() { return cGroup; }

		//"Test"
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }

		//browser=STRING
		public Assignment getBrowserAssignment_1() { return cBrowserAssignment_1; }

		//STRING
		public RuleCall getBrowserSTRINGTerminalRuleCall_1_0() { return cBrowserSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//body+=Instruction*
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_3_0() { return cBodyInstructionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_2_1_0 = (RuleCall)cParametersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_2_2_1_0 = (RuleCall)cParametersAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyInstructionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sequence:
		//	"Sequence" name=ID ("(" parameters+=Variable ("," parameters+=Variable)* ")")? "{" body+=Instruction* "}";
		@Override public ParserRule getRule() { return rule; }

		//"Sequence" name=ID ("(" parameters+=Variable ("," parameters+=Variable)* ")")? "{" body+=Instruction* "}"
		public Group getGroup() { return cGroup; }

		//"Sequence"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("(" parameters+=Variable ("," parameters+=Variable)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_2_1() { return cParametersAssignment_2_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_2_1_0() { return cParametersVariableParserRuleCall_2_1_0; }

		//("," parameters+=Variable)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_2_2_1() { return cParametersAssignment_2_2_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_2_2_1_0() { return cParametersVariableParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//body+=Instruction*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_4_0() { return cBodyInstructionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSequenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cForAllParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfThenElseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAffectationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExecParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cFillParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cCheckParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cClickParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cVerifyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cGoToParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//////////////////////////////////////////////////////////////////////////////
		//// INSTRUCTIONS ////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////
		//Instruction:
		//	Sequence | ForAll | DoWhile | IfThenElse | Affectation | Exec | Fill | Check | Click | Verify | GoTo;
		@Override public ParserRule getRule() { return rule; }

		//Sequence | ForAll | DoWhile | IfThenElse | Affectation | Exec | Fill | Check | Click | Verify | GoTo
		public Alternatives getAlternatives() { return cAlternatives; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_0() { return cSequenceParserRuleCall_0; }

		//ForAll
		public RuleCall getForAllParserRuleCall_1() { return cForAllParserRuleCall_1; }

		//DoWhile
		public RuleCall getDoWhileParserRuleCall_2() { return cDoWhileParserRuleCall_2; }

		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_3() { return cIfThenElseParserRuleCall_3; }

		//Affectation
		public RuleCall getAffectationParserRuleCall_4() { return cAffectationParserRuleCall_4; }

		//Exec
		public RuleCall getExecParserRuleCall_5() { return cExecParserRuleCall_5; }

		//Fill
		public RuleCall getFillParserRuleCall_6() { return cFillParserRuleCall_6; }

		//Check
		public RuleCall getCheckParserRuleCall_7() { return cCheckParserRuleCall_7; }

		//Click
		public RuleCall getClickParserRuleCall_8() { return cClickParserRuleCall_8; }

		//Verify
		public RuleCall getVerifyParserRuleCall_9() { return cVerifyParserRuleCall_9; }

		//GoTo
		public RuleCall getGoToParserRuleCall_10() { return cGoToParserRuleCall_10; }
	}

	public class ForAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElemsElemsParserRuleCall_1_0 = (RuleCall)cElemsAssignment_1.eContents().get(0);
		private final Assignment cItAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItVariableParserRuleCall_2_0 = (RuleCall)cItAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyInstructionParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// BLOCS
		//ForAll:
		//	"ForAll" elems=Elems it=Variable "{" body+=Instruction* "}";
		@Override public ParserRule getRule() { return rule; }

		//"ForAll" elems=Elems it=Variable "{" body+=Instruction* "}"
		public Group getGroup() { return cGroup; }

		//"ForAll"
		public Keyword getForAllKeyword_0() { return cForAllKeyword_0; }

		//elems=Elems
		public Assignment getElemsAssignment_1() { return cElemsAssignment_1; }

		//Elems
		public RuleCall getElemsElemsParserRuleCall_1_0() { return cElemsElemsParserRuleCall_1_0; }

		//it=Variable
		public Assignment getItAssignment_2() { return cItAssignment_2; }

		//Variable
		public RuleCall getItVariableParserRuleCall_2_0() { return cItVariableParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//body+=Instruction*
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_4_0() { return cBodyInstructionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DoWhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoWhile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBodyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBodyInstructionParserRuleCall_1_0 = (RuleCall)cBodyAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionConditionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DoWhile:
		//	"Do {" body+=Instruction* "} While (" condition=Condition ")";
		@Override public ParserRule getRule() { return rule; }

		//"Do {" body+=Instruction* "} While (" condition=Condition ")"
		public Group getGroup() { return cGroup; }

		//"Do {"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//body+=Instruction*
		public Assignment getBodyAssignment_1() { return cBodyAssignment_1; }

		//Instruction
		public RuleCall getBodyInstructionParserRuleCall_1_0() { return cBodyInstructionParserRuleCall_1_0; }

		//"} While ("
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//condition=Condition
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_3_0() { return cConditionConditionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cThenAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cThenInstructionParserRuleCall_3_0 = (RuleCall)cThenAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseInstructionParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//IfThenElse:
		//	"If" condition=Condition "{" then+=Instruction* "}" ("Else {" else+=Instruction* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//"If" condition=Condition "{" then+=Instruction* "}" ("Else {" else+=Instruction* "}")?
		public Group getGroup() { return cGroup; }

		//"If"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//then+=Instruction*
		public Assignment getThenAssignment_3() { return cThenAssignment_3; }

		//Instruction
		public RuleCall getThenInstructionParserRuleCall_3_0() { return cThenInstructionParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//("Else {" else+=Instruction* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"Else {"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else+=Instruction*
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }

		//Instruction
		public RuleCall getElseInstructionParserRuleCall_5_1_0() { return cElseInstructionParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }
	}

	public class AffectationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Affectation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariableVariableParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cElemAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElemElemParserRuleCall_2_0 = (RuleCall)cElemAssignment_2.eContents().get(0);
		
		//// OPERATIONS
		//Affectation:
		//	variable=Variable "=" elem=Elem;
		@Override public ParserRule getRule() { return rule; }

		//variable=Variable "=" elem=Elem
		public Group getGroup() { return cGroup; }

		//variable=Variable
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0() { return cVariableVariableParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//elem=Elem
		public Assignment getElemAssignment_2() { return cElemAssignment_2; }

		//Elem
		public RuleCall getElemElemParserRuleCall_2_0() { return cElemElemParserRuleCall_2_0; }
	}

	public class ExecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSequenceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSequenceSequenceCrossReference_1_0 = (CrossReference)cSequenceAssignment_1.eContents().get(0);
		private final RuleCall cSequenceSequenceIDTerminalRuleCall_1_0_1 = (RuleCall)cSequenceSequenceCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cParamsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cParamsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cParamsSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cParamsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Exec:
		//	"Exec" sequence=[Sequence] ("(" params+=STRING ("," params+=STRING)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//"Exec" sequence=[Sequence] ("(" params+=STRING ("," params+=STRING)* ")")?
		public Group getGroup() { return cGroup; }

		//"Exec"
		public Keyword getExecKeyword_0() { return cExecKeyword_0; }

		//sequence=[Sequence]
		public Assignment getSequenceAssignment_1() { return cSequenceAssignment_1; }

		//[Sequence]
		public CrossReference getSequenceSequenceCrossReference_1_0() { return cSequenceSequenceCrossReference_1_0; }

		//ID
		public RuleCall getSequenceSequenceIDTerminalRuleCall_1_0_1() { return cSequenceSequenceIDTerminalRuleCall_1_0_1; }

		//("(" params+=STRING ("," params+=STRING)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//params+=STRING
		public Assignment getParamsAssignment_2_1() { return cParamsAssignment_2_1; }

		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_2_1_0() { return cParamsSTRINGTerminalRuleCall_2_1_0; }

		//("," params+=STRING)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//params+=STRING
		public Assignment getParamsAssignment_2_2_1() { return cParamsAssignment_2_2_1; }

		//STRING
		public RuleCall getParamsSTRINGTerminalRuleCall_2_2_1_0() { return cParamsSTRINGTerminalRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class FillElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fill");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFillKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldSTRINGTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_0_0 = (RuleCall)cValueAssignment_3_0.eContents().get(0);
		private final Assignment cParamAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cParamVariableCrossReference_3_1_0 = (CrossReference)cParamAssignment_3_1.eContents().get(0);
		private final RuleCall cParamVariableIDTerminalRuleCall_3_1_0_1 = (RuleCall)cParamVariableCrossReference_3_1_0.eContents().get(1);
		
		//Fill:
		//	"Fill" field=STRING "with" (value=STRING | param=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"Fill" field=STRING "with" (value=STRING | param=[Variable])
		public Group getGroup() { return cGroup; }

		//"Fill"
		public Keyword getFillKeyword_0() { return cFillKeyword_0; }

		//field=STRING
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }

		//STRING
		public RuleCall getFieldSTRINGTerminalRuleCall_1_0() { return cFieldSTRINGTerminalRuleCall_1_0; }

		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }

		//value=STRING | param=[Variable]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//value=STRING
		public Assignment getValueAssignment_3_0() { return cValueAssignment_3_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_0_0() { return cValueSTRINGTerminalRuleCall_3_0_0; }

		//param=[Variable]
		public Assignment getParamAssignment_3_1() { return cParamAssignment_3_1; }

		//[Variable]
		public CrossReference getParamVariableCrossReference_3_1_0() { return cParamVariableCrossReference_3_1_0; }

		//ID
		public RuleCall getParamVariableIDTerminalRuleCall_3_1_0_1() { return cParamVariableIDTerminalRuleCall_3_1_0_1; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCheckboxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cCheckboxAlternatives_1_0 = (Alternatives)cCheckboxAssignment_1.eContents().get(0);
		private final RuleCall cCheckboxGetCheckboxParserRuleCall_1_0_0 = (RuleCall)cCheckboxAlternatives_1_0.eContents().get(0);
		private final CrossReference cCheckboxVariableCrossReference_1_0_1 = (CrossReference)cCheckboxAlternatives_1_0.eContents().get(1);
		private final RuleCall cCheckboxVariableIDTerminalRuleCall_1_0_1_1 = (RuleCall)cCheckboxVariableCrossReference_1_0_1.eContents().get(1);
		
		//Check:
		//	"Check" checkbox=(GetCheckbox | [Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"Check" checkbox=(GetCheckbox | [Variable])
		public Group getGroup() { return cGroup; }

		//"Check"
		public Keyword getCheckKeyword_0() { return cCheckKeyword_0; }

		//checkbox=(GetCheckbox | [Variable])
		public Assignment getCheckboxAssignment_1() { return cCheckboxAssignment_1; }

		//(GetCheckbox | [Variable])
		public Alternatives getCheckboxAlternatives_1_0() { return cCheckboxAlternatives_1_0; }

		//GetCheckbox
		public RuleCall getCheckboxGetCheckboxParserRuleCall_1_0_0() { return cCheckboxGetCheckboxParserRuleCall_1_0_0; }

		//[Variable]
		public CrossReference getCheckboxVariableCrossReference_1_0_1() { return cCheckboxVariableCrossReference_1_0_1; }

		//ID
		public RuleCall getCheckboxVariableIDTerminalRuleCall_1_0_1_1() { return cCheckboxVariableIDTerminalRuleCall_1_0_1_1; }
	}

	public class ClickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Click");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemElemCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemElemIDTerminalRuleCall_1_0_1 = (RuleCall)cElemElemCrossReference_1_0.eContents().get(1);
		
		//Click:
		//	"Click" elem=[Elem];
		@Override public ParserRule getRule() { return rule; }

		//"Click" elem=[Elem]
		public Group getGroup() { return cGroup; }

		//"Click"
		public Keyword getClickKeyword_0() { return cClickKeyword_0; }

		//elem=[Elem]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[Elem]
		public CrossReference getElemElemCrossReference_1_0() { return cElemElemCrossReference_1_0; }

		//ID
		public RuleCall getElemElemIDTerminalRuleCall_1_0_1() { return cElemElemIDTerminalRuleCall_1_0_1; }
	}

	public class VerifyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verify");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerifyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		
		//Verify:
		//	"Verify" condition=Condition;
		@Override public ParserRule getRule() { return rule; }

		//"Verify" condition=Condition
		public Group getGroup() { return cGroup; }

		//"Verify"
		public Keyword getVerifyKeyword_0() { return cVerifyKeyword_0; }

		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }

		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
	}

	public class GoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GoTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cLinkAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Alternatives cLinkAlternatives_1_1_0 = (Alternatives)cLinkAssignment_1_1.eContents().get(0);
		private final CrossReference cLinkVariableCrossReference_1_1_0_0 = (CrossReference)cLinkAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cLinkVariableIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cLinkVariableCrossReference_1_1_0_0.eContents().get(1);
		private final RuleCall cLinkGetLinkParserRuleCall_1_1_0_1 = (RuleCall)cLinkAlternatives_1_1_0.eContents().get(1);
		
		//GoTo:
		//	"GoTo" (value=STRING | link=([Variable] | GetLink));
		@Override public ParserRule getRule() { return rule; }

		//"GoTo" (value=STRING | link=([Variable] | GetLink))
		public Group getGroup() { return cGroup; }

		//"GoTo"
		public Keyword getGoToKeyword_0() { return cGoToKeyword_0; }

		//value=STRING | link=([Variable] | GetLink)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//link=([Variable] | GetLink)
		public Assignment getLinkAssignment_1_1() { return cLinkAssignment_1_1; }

		//([Variable] | GetLink)
		public Alternatives getLinkAlternatives_1_1_0() { return cLinkAlternatives_1_1_0; }

		//[Variable]
		public CrossReference getLinkVariableCrossReference_1_1_0_0() { return cLinkVariableCrossReference_1_1_0_0; }

		//ID
		public RuleCall getLinkVariableIDTerminalRuleCall_1_1_0_0_1() { return cLinkVariableIDTerminalRuleCall_1_1_0_0_1; }

		//GetLink
		public RuleCall getLinkGetLinkParserRuleCall_1_1_0_1() { return cLinkGetLinkParserRuleCall_1_1_0_1; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cUnaryConditionParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cBinaryConditionParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//// CONDITIONS
		//Condition:
		//	"Not"? (UnaryCondition | BinaryCondition);
		@Override public ParserRule getRule() { return rule; }

		//"Not"? (UnaryCondition | BinaryCondition)
		public Group getGroup() { return cGroup; }

		//"Not"?
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//UnaryCondition | BinaryCondition
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//UnaryCondition
		public RuleCall getUnaryConditionParserRuleCall_1_0() { return cUnaryConditionParserRuleCall_1_0; }

		//BinaryCondition
		public RuleCall getBinaryConditionParserRuleCall_1_1() { return cBinaryConditionParserRuleCall_1_1; }
	}

	public class UnaryConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpUnaryOpEnumRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cElemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cElemElemCrossReference_1_0 = (CrossReference)cElemAssignment_1.eContents().get(0);
		private final RuleCall cElemElemIDTerminalRuleCall_1_0_1 = (RuleCall)cElemElemCrossReference_1_0.eContents().get(1);
		
		//UnaryCondition:
		//	op=UnaryOp elem=[Elem];
		@Override public ParserRule getRule() { return rule; }

		//op=UnaryOp elem=[Elem]
		public Group getGroup() { return cGroup; }

		//op=UnaryOp
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//UnaryOp
		public RuleCall getOpUnaryOpEnumRuleCall_0_0() { return cOpUnaryOpEnumRuleCall_0_0; }

		//elem=[Elem]
		public Assignment getElemAssignment_1() { return cElemAssignment_1; }

		//[Elem]
		public CrossReference getElemElemCrossReference_1_0() { return cElemElemCrossReference_1_0; }

		//ID
		public RuleCall getElemElemIDTerminalRuleCall_1_0_1() { return cElemElemIDTerminalRuleCall_1_0_1; }
	}

	public class BinaryConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cElemElemParserRuleCall_0_0 = (RuleCall)cElemAssignment_0.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpBinaryOpEnumRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cParamAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cParamVariableCrossReference_2_1_0 = (CrossReference)cParamAssignment_2_1.eContents().get(0);
		private final RuleCall cParamVariableIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParamVariableCrossReference_2_1_0.eContents().get(1);
		
		//BinaryCondition:
		//	elem=Elem op=BinaryOp (value=STRING | param=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//elem=Elem op=BinaryOp (value=STRING | param=[Variable])
		public Group getGroup() { return cGroup; }

		//elem=Elem
		public Assignment getElemAssignment_0() { return cElemAssignment_0; }

		//Elem
		public RuleCall getElemElemParserRuleCall_0_0() { return cElemElemParserRuleCall_0_0; }

		//op=BinaryOp
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }

		//BinaryOp
		public RuleCall getOpBinaryOpEnumRuleCall_1_0() { return cOpBinaryOpEnumRuleCall_1_0; }

		//value=STRING | param=[Variable]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=STRING
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }

		//param=[Variable]
		public Assignment getParamAssignment_2_1() { return cParamAssignment_2_1; }

		//[Variable]
		public CrossReference getParamVariableCrossReference_2_1_0() { return cParamVariableCrossReference_2_1_0; }

		//ID
		public RuleCall getParamVariableIDTerminalRuleCall_2_1_0_1() { return cParamVariableIDTerminalRuleCall_2_1_0_1; }
	}

	public class ElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Elem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGetButtonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGetCheckboxParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGetTextParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//////////////////////////////////////////////////////////////////////////////
		//// ELEMENTS ////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////////
		//Elem:
		//	GetButton | GetLink | GetCheckbox | GetText | Variable;
		@Override public ParserRule getRule() { return rule; }

		//GetButton | GetLink | GetCheckbox | GetText | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//GetButton
		public RuleCall getGetButtonParserRuleCall_0() { return cGetButtonParserRuleCall_0; }

		//GetLink
		public RuleCall getGetLinkParserRuleCall_1() { return cGetLinkParserRuleCall_1; }

		//GetCheckbox
		public RuleCall getGetCheckboxParserRuleCall_2() { return cGetCheckboxParserRuleCall_2; }

		//GetText
		public RuleCall getGetTextParserRuleCall_3() { return cGetTextParserRuleCall_3; }

		//Variable
		public RuleCall getVariableParserRuleCall_4() { return cVariableParserRuleCall_4; }
	}

	public class GetButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetButton");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_1_0 = (CrossReference)cVarAssignment_1_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarVariableCrossReference_1_1_0.eContents().get(1);
		
		//GetButton:
		//	"GetButton" (value=STRING | var=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"GetButton" (value=STRING | var=[Variable])
		public Group getGroup() { return cGroup; }

		//"GetButton"
		public Keyword getGetButtonKeyword_0() { return cGetButtonKeyword_0; }

		//value=STRING | var=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//var=[Variable]
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_1_1_0() { return cVarVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_1_0_1() { return cVarVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class GetLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetLink");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_1_0 = (CrossReference)cVarAssignment_1_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarVariableCrossReference_1_1_0.eContents().get(1);
		
		//GetLink:
		//	"GetLink" (value=STRING | var=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"GetLink" (value=STRING | var=[Variable])
		public Group getGroup() { return cGroup; }

		//"GetLink"
		public Keyword getGetLinkKeyword_0() { return cGetLinkKeyword_0; }

		//value=STRING | var=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//var=[Variable]
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_1_1_0() { return cVarVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_1_0_1() { return cVarVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class GetCheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetCheckbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_1_0 = (CrossReference)cVarAssignment_1_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarVariableCrossReference_1_1_0.eContents().get(1);
		
		//GetCheckbox:
		//	"GetCheckbox" (value=STRING | var=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"GetCheckbox" (value=STRING | var=[Variable])
		public Group getGroup() { return cGroup; }

		//"GetCheckbox"
		public Keyword getGetCheckboxKeyword_0() { return cGetCheckboxKeyword_0; }

		//value=STRING | var=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//var=[Variable]
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_1_1_0() { return cVarVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_1_0_1() { return cVarVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class GetTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_1_0 = (CrossReference)cVarAssignment_1_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarVariableCrossReference_1_1_0.eContents().get(1);
		
		//GetText:
		//	"GetText" (value=STRING | var=[Variable]);
		@Override public ParserRule getRule() { return rule; }

		//"GetText" (value=STRING | var=[Variable])
		public Group getGroup() { return cGroup; }

		//"GetText"
		public Keyword getGetTextKeyword_0() { return cGetTextKeyword_0; }

		//value=STRING | var=[Variable]
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//var=[Variable]
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_1_1_0() { return cVarVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_1_0_1() { return cVarVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class ElemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Elems");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGetButtonsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGetCheckboxesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGetLinksParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Elems:
		//	GetButtons | GetCheckboxes | GetLinks;
		@Override public ParserRule getRule() { return rule; }

		//GetButtons | GetCheckboxes | GetLinks
		public Alternatives getAlternatives() { return cAlternatives; }

		//GetButtons
		public RuleCall getGetButtonsParserRuleCall_0() { return cGetButtonsParserRuleCall_0; }

		//GetCheckboxes
		public RuleCall getGetCheckboxesParserRuleCall_1() { return cGetCheckboxesParserRuleCall_1; }

		//GetLinks
		public RuleCall getGetLinksParserRuleCall_2() { return cGetLinksParserRuleCall_2; }
	}

	public class GetButtonsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetButtons");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetButtonsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_1_0 = (CrossReference)cVarAssignment_1_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarVariableCrossReference_1_1_0.eContents().get(1);
		
		//GetButtons:
		//	"GetButtons" (value=STRING | var=[Variable])?;
		@Override public ParserRule getRule() { return rule; }

		//"GetButtons" (value=STRING | var=[Variable])?
		public Group getGroup() { return cGroup; }

		//"GetButtons"
		public Keyword getGetButtonsKeyword_0() { return cGetButtonsKeyword_0; }

		//(value=STRING | var=[Variable])?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//var=[Variable]
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_1_1_0() { return cVarVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_1_0_1() { return cVarVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class GetCheckboxesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetCheckboxes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetCheckboxesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_1_0 = (CrossReference)cVarAssignment_1_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarVariableCrossReference_1_1_0.eContents().get(1);
		
		//GetCheckboxes:
		//	"GetCheckboxes" (value=STRING | var=[Variable])?;
		@Override public ParserRule getRule() { return rule; }

		//"GetCheckboxes" (value=STRING | var=[Variable])?
		public Group getGroup() { return cGroup; }

		//"GetCheckboxes"
		public Keyword getGetCheckboxesKeyword_0() { return cGetCheckboxesKeyword_0; }

		//(value=STRING | var=[Variable])?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//var=[Variable]
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_1_1_0() { return cVarVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_1_0_1() { return cVarVariableIDTerminalRuleCall_1_1_0_1; }
	}

	public class GetLinksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetLinks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetLinksKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cVarVariableCrossReference_1_1_0 = (CrossReference)cVarAssignment_1_1.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_1_1_0_1 = (RuleCall)cVarVariableCrossReference_1_1_0.eContents().get(1);
		
		//GetLinks:
		//	"GetLinks" (value=STRING | var=[Variable])?;
		@Override public ParserRule getRule() { return rule; }

		//"GetLinks" (value=STRING | var=[Variable])?
		public Group getGroup() { return cGroup; }

		//"GetLinks"
		public Keyword getGetLinksKeyword_0() { return cGetLinksKeyword_0; }

		//(value=STRING | var=[Variable])?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=STRING
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0_0() { return cValueSTRINGTerminalRuleCall_1_0_0; }

		//var=[Variable]
		public Assignment getVarAssignment_1_1() { return cVarAssignment_1_1; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_1_1_0() { return cVarVariableCrossReference_1_1_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_1_1_0_1() { return cVarVariableIDTerminalRuleCall_1_1_0_1; }
	}
	
	
	public class BinaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContainsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContainsContainsKeyword_0_0 = (Keyword)cContainsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEqualsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEqualsEqualsKeyword_1_0 = (Keyword)cEqualsEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BinaryOp:
		//	Contains | Equals;
		public EnumRule getRule() { return rule; }

		//Contains | Equals
		public Alternatives getAlternatives() { return cAlternatives; }

		//Contains
		public EnumLiteralDeclaration getContainsEnumLiteralDeclaration_0() { return cContainsEnumLiteralDeclaration_0; }

		//"Contains"
		public Keyword getContainsContainsKeyword_0_0() { return cContainsContainsKeyword_0_0; }

		//Equals
		public EnumLiteralDeclaration getEqualsEnumLiteralDeclaration_1() { return cEqualsEnumLiteralDeclaration_1; }

		//"Equals"
		public Keyword getEqualsEqualsKeyword_1_0() { return cEqualsEqualsKeyword_1_0; }
	}

	public class UnaryOpElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIsCheckedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIsCheckedIsCheckedKeyword_0_0 = (Keyword)cIsCheckedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIsEnabledEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIsEnabledIsEnabledKeyword_1_0 = (Keyword)cIsEnabledEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExistsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExistsExistsKeyword_2_0 = (Keyword)cExistsEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum UnaryOp:
		//	IsChecked | IsEnabled | Exists;
		public EnumRule getRule() { return rule; }

		//IsChecked | IsEnabled | Exists
		public Alternatives getAlternatives() { return cAlternatives; }

		//IsChecked
		public EnumLiteralDeclaration getIsCheckedEnumLiteralDeclaration_0() { return cIsCheckedEnumLiteralDeclaration_0; }

		//"IsChecked"
		public Keyword getIsCheckedIsCheckedKeyword_0_0() { return cIsCheckedIsCheckedKeyword_0_0; }

		//IsEnabled
		public EnumLiteralDeclaration getIsEnabledEnumLiteralDeclaration_1() { return cIsEnabledEnumLiteralDeclaration_1; }

		//"IsEnabled"
		public Keyword getIsEnabledIsEnabledKeyword_1_0() { return cIsEnabledIsEnabledKeyword_1_0; }

		//Exists
		public EnumLiteralDeclaration getExistsEnumLiteralDeclaration_2() { return cExistsEnumLiteralDeclaration_2; }

		//"Exists"
		public Keyword getExistsExistsKeyword_2_0() { return cExistsExistsKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final TestElements pTest;
	private final SequenceElements pSequence;
	private final VariableElements pVariable;
	private final InstructionElements pInstruction;
	private final ForAllElements pForAll;
	private final DoWhileElements pDoWhile;
	private final IfThenElseElements pIfThenElse;
	private final AffectationElements pAffectation;
	private final ExecElements pExec;
	private final FillElements pFill;
	private final CheckElements pCheck;
	private final ClickElements pClick;
	private final VerifyElements pVerify;
	private final GoToElements pGoTo;
	private final ConditionElements pCondition;
	private final UnaryConditionElements pUnaryCondition;
	private final BinaryConditionElements pBinaryCondition;
	private final BinaryOpElements unknownRuleBinaryOp;
	private final UnaryOpElements unknownRuleUnaryOp;
	private final ElemElements pElem;
	private final GetButtonElements pGetButton;
	private final GetLinkElements pGetLink;
	private final GetCheckboxElements pGetCheckbox;
	private final GetTextElements pGetText;
	private final ElemsElements pElems;
	private final GetButtonsElements pGetButtons;
	private final GetCheckboxesElements pGetCheckboxes;
	private final GetLinksElements pGetLinks;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SELGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pTest = new TestElements();
		this.pSequence = new SequenceElements();
		this.pVariable = new VariableElements();
		this.pInstruction = new InstructionElements();
		this.pForAll = new ForAllElements();
		this.pDoWhile = new DoWhileElements();
		this.pIfThenElse = new IfThenElseElements();
		this.pAffectation = new AffectationElements();
		this.pExec = new ExecElements();
		this.pFill = new FillElements();
		this.pCheck = new CheckElements();
		this.pClick = new ClickElements();
		this.pVerify = new VerifyElements();
		this.pGoTo = new GoToElements();
		this.pCondition = new ConditionElements();
		this.pUnaryCondition = new UnaryConditionElements();
		this.pBinaryCondition = new BinaryConditionElements();
		this.unknownRuleBinaryOp = new BinaryOpElements();
		this.unknownRuleUnaryOp = new UnaryOpElements();
		this.pElem = new ElemElements();
		this.pGetButton = new GetButtonElements();
		this.pGetLink = new GetLinkElements();
		this.pGetCheckbox = new GetCheckboxElements();
		this.pGetText = new GetTextElements();
		this.pElems = new ElemsElements();
		this.pGetButtons = new GetButtonsElements();
		this.pGetCheckboxes = new GetCheckboxesElements();
		this.pGetLinks = new GetLinksElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.emn.selenium.SEL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//////////////////////////////////////////////////////////////////////////////
	//// PROGRAM /////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//Program:
	//	(sequences+=Sequence | tests+=Test)*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////
	//// MAIN INSTRUCTIONS ///////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//Test:
	//	"Test" browser=STRING "{" body+=Instruction* "}";
	public TestElements getTestAccess() {
		return pTest;
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//Sequence:
	//	"Sequence" name=ID ("(" parameters+=Variable ("," parameters+=Variable)* ")")? "{" body+=Instruction* "}";
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////
	//// INSTRUCTIONS ////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//Instruction:
	//	Sequence | ForAll | DoWhile | IfThenElse | Affectation | Exec | Fill | Check | Click | Verify | GoTo;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//// BLOCS
	//ForAll:
	//	"ForAll" elems=Elems it=Variable "{" body+=Instruction* "}";
	public ForAllElements getForAllAccess() {
		return pForAll;
	}
	
	public ParserRule getForAllRule() {
		return getForAllAccess().getRule();
	}

	//DoWhile:
	//	"Do {" body+=Instruction* "} While (" condition=Condition ")";
	public DoWhileElements getDoWhileAccess() {
		return pDoWhile;
	}
	
	public ParserRule getDoWhileRule() {
		return getDoWhileAccess().getRule();
	}

	//IfThenElse:
	//	"If" condition=Condition "{" then+=Instruction* "}" ("Else {" else+=Instruction* "}")?;
	public IfThenElseElements getIfThenElseAccess() {
		return pIfThenElse;
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	//// OPERATIONS
	//Affectation:
	//	variable=Variable "=" elem=Elem;
	public AffectationElements getAffectationAccess() {
		return pAffectation;
	}
	
	public ParserRule getAffectationRule() {
		return getAffectationAccess().getRule();
	}

	//Exec:
	//	"Exec" sequence=[Sequence] ("(" params+=STRING ("," params+=STRING)* ")")?;
	public ExecElements getExecAccess() {
		return pExec;
	}
	
	public ParserRule getExecRule() {
		return getExecAccess().getRule();
	}

	//Fill:
	//	"Fill" field=STRING "with" (value=STRING | param=[Variable]);
	public FillElements getFillAccess() {
		return pFill;
	}
	
	public ParserRule getFillRule() {
		return getFillAccess().getRule();
	}

	//Check:
	//	"Check" checkbox=(GetCheckbox | [Variable]);
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//Click:
	//	"Click" elem=[Elem];
	public ClickElements getClickAccess() {
		return pClick;
	}
	
	public ParserRule getClickRule() {
		return getClickAccess().getRule();
	}

	//Verify:
	//	"Verify" condition=Condition;
	public VerifyElements getVerifyAccess() {
		return pVerify;
	}
	
	public ParserRule getVerifyRule() {
		return getVerifyAccess().getRule();
	}

	//GoTo:
	//	"GoTo" (value=STRING | link=([Variable] | GetLink));
	public GoToElements getGoToAccess() {
		return pGoTo;
	}
	
	public ParserRule getGoToRule() {
		return getGoToAccess().getRule();
	}

	//// CONDITIONS
	//Condition:
	//	"Not"? (UnaryCondition | BinaryCondition);
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//UnaryCondition:
	//	op=UnaryOp elem=[Elem];
	public UnaryConditionElements getUnaryConditionAccess() {
		return pUnaryCondition;
	}
	
	public ParserRule getUnaryConditionRule() {
		return getUnaryConditionAccess().getRule();
	}

	//BinaryCondition:
	//	elem=Elem op=BinaryOp (value=STRING | param=[Variable]);
	public BinaryConditionElements getBinaryConditionAccess() {
		return pBinaryCondition;
	}
	
	public ParserRule getBinaryConditionRule() {
		return getBinaryConditionAccess().getRule();
	}

	//enum BinaryOp:
	//	Contains | Equals;
	public BinaryOpElements getBinaryOpAccess() {
		return unknownRuleBinaryOp;
	}
	
	public EnumRule getBinaryOpRule() {
		return getBinaryOpAccess().getRule();
	}

	//enum UnaryOp:
	//	IsChecked | IsEnabled | Exists;
	public UnaryOpElements getUnaryOpAccess() {
		return unknownRuleUnaryOp;
	}
	
	public EnumRule getUnaryOpRule() {
		return getUnaryOpAccess().getRule();
	}

	//////////////////////////////////////////////////////////////////////////////
	//// ELEMENTS ////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////////
	//Elem:
	//	GetButton | GetLink | GetCheckbox | GetText | Variable;
	public ElemElements getElemAccess() {
		return pElem;
	}
	
	public ParserRule getElemRule() {
		return getElemAccess().getRule();
	}

	//GetButton:
	//	"GetButton" (value=STRING | var=[Variable]);
	public GetButtonElements getGetButtonAccess() {
		return pGetButton;
	}
	
	public ParserRule getGetButtonRule() {
		return getGetButtonAccess().getRule();
	}

	//GetLink:
	//	"GetLink" (value=STRING | var=[Variable]);
	public GetLinkElements getGetLinkAccess() {
		return pGetLink;
	}
	
	public ParserRule getGetLinkRule() {
		return getGetLinkAccess().getRule();
	}

	//GetCheckbox:
	//	"GetCheckbox" (value=STRING | var=[Variable]);
	public GetCheckboxElements getGetCheckboxAccess() {
		return pGetCheckbox;
	}
	
	public ParserRule getGetCheckboxRule() {
		return getGetCheckboxAccess().getRule();
	}

	//GetText:
	//	"GetText" (value=STRING | var=[Variable]);
	public GetTextElements getGetTextAccess() {
		return pGetText;
	}
	
	public ParserRule getGetTextRule() {
		return getGetTextAccess().getRule();
	}

	//Elems:
	//	GetButtons | GetCheckboxes | GetLinks;
	public ElemsElements getElemsAccess() {
		return pElems;
	}
	
	public ParserRule getElemsRule() {
		return getElemsAccess().getRule();
	}

	//GetButtons:
	//	"GetButtons" (value=STRING | var=[Variable])?;
	public GetButtonsElements getGetButtonsAccess() {
		return pGetButtons;
	}
	
	public ParserRule getGetButtonsRule() {
		return getGetButtonsAccess().getRule();
	}

	//GetCheckboxes:
	//	"GetCheckboxes" (value=STRING | var=[Variable])?;
	public GetCheckboxesElements getGetCheckboxesAccess() {
		return pGetCheckboxes;
	}
	
	public ParserRule getGetCheckboxesRule() {
		return getGetCheckboxesAccess().getRule();
	}

	//GetLinks:
	//	"GetLinks" (value=STRING | var=[Variable])?;
	public GetLinksElements getGetLinksAccess() {
		return pGetLinks;
	}
	
	public ParserRule getGetLinksRule() {
		return getGetLinksAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

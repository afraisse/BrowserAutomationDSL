/*
 * generated by Xtext
 */
grammar InternalSEL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.emn.selenium.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.emn.selenium.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.emn.selenium.services.SELGrammarAccess;

}

@parser::members {

 	private SELGrammarAccess grammarAccess;
 	
    public InternalSELParser(TokenStream input, SELGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected SELGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getSequencesSequenceParserRuleCall_0_0()); 
	    }
		lv_sequences_0_0=ruleSequence		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"sequences",
        		lv_sequences_0_0, 
        		"Sequence");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getTestsTestParserRuleCall_1_0()); 
	    }
		lv_tests_1_0=ruleTest		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"tests",
        		lv_tests_1_0, 
        		"Test");
	        afterParserOrEnumRuleCall();
	    }

)
))*
;





// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruleTest=ruleTest 
	 { $current=$iv_ruleTest.current; } 
	 EOF 
;

// Rule Test
ruleTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Test' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestAccess().getTestKeyword_0());
    }
(
(
		lv_browser_1_0=RULE_STRING
		{
			newLeafNode(lv_browser_1_0, grammarAccess.getTestAccess().getBrowserSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"browser",
        		lv_browser_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getBodyInstructionParserRuleCall_3_0()); 
	    }
		lv_body_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTestAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Sequence' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceAccess().getSequenceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSequenceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSequenceAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getParametersVariableParserRuleCall_2_1_0()); 
	    }
		lv_parameters_3_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequenceAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getParametersVariableParserRuleCall_2_2_1_0()); 
	    }
		lv_parameters_5_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSequenceAccess().getRightParenthesisKeyword_2_3());
    }
)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSequenceAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getBodyInstructionParserRuleCall_4_0()); 
	    }
		lv_body_8_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSequenceAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionRule()); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getSequenceParserRuleCall_0()); 
    }
    this_Sequence_0=ruleSequence
    { 
        $current = $this_Sequence_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getForAllParserRuleCall_1()); 
    }
    this_ForAll_1=ruleForAll
    { 
        $current = $this_ForAll_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getDoWhileParserRuleCall_2()); 
    }
    this_DoWhile_2=ruleDoWhile
    { 
        $current = $this_DoWhile_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getIfThenElseParserRuleCall_3()); 
    }
    this_IfThenElse_3=ruleIfThenElse
    { 
        $current = $this_IfThenElse_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getAffectationParserRuleCall_4()); 
    }
    this_Affectation_4=ruleAffectation
    { 
        $current = $this_Affectation_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getExecParserRuleCall_5()); 
    }
    this_Exec_5=ruleExec
    { 
        $current = $this_Exec_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getFillParserRuleCall_6()); 
    }
    this_Fill_6=ruleFill
    { 
        $current = $this_Fill_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getCheckParserRuleCall_7()); 
    }
    this_Check_7=ruleCheck
    { 
        $current = $this_Check_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getClickParserRuleCall_8()); 
    }
    this_Click_8=ruleClick
    { 
        $current = $this_Click_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getVerifyParserRuleCall_9()); 
    }
    this_Verify_9=ruleVerify
    { 
        $current = $this_Verify_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInstructionAccess().getGoToParserRuleCall_10()); 
    }
    this_GoTo_10=ruleGoTo
    { 
        $current = $this_GoTo_10.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForAll
entryRuleForAll returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForAllRule()); }
	 iv_ruleForAll=ruleForAll 
	 { $current=$iv_ruleForAll.current; } 
	 EOF 
;

// Rule ForAll
ruleForAll returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ForAll' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForAllAccess().getForAllKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllAccess().getElemsElemsParserRuleCall_1_0()); 
	    }
		lv_elems_1_0=ruleElems		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllRule());
	        }
       		set(
       			$current, 
       			"elems",
        		lv_elems_1_0, 
        		"Elems");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllAccess().getItVariableParserRuleCall_2_0()); 
	    }
		lv_it_2_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllRule());
	        }
       		set(
       			$current, 
       			"it",
        		lv_it_2_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForAllAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForAllAccess().getBodyInstructionParserRuleCall_4_0()); 
	    }
		lv_body_4_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForAllRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_4_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForAllAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleDoWhile
entryRuleDoWhile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoWhileRule()); }
	 iv_ruleDoWhile=ruleDoWhile 
	 { $current=$iv_ruleDoWhile.current; } 
	 EOF 
;

// Rule DoWhile
ruleDoWhile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Do {' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoWhileAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileAccess().getBodyInstructionParserRuleCall_1_0()); 
	    }
		lv_body_1_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileRule());
	        }
       		add(
       			$current, 
       			"body",
        		lv_body_1_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='} While (' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoWhileAccess().getWhileKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoWhileAccess().getConditionConditionParserRuleCall_3_0()); 
	    }
		lv_condition_3_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoWhileRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_3_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDoWhileAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseRule()); }
	 iv_ruleIfThenElse=ruleIfThenElse 
	 { $current=$iv_ruleIfThenElse.current; } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='If' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfThenElseAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getConditionConditionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIfThenElseAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getThenInstructionParserRuleCall_3_0()); 
	    }
		lv_then_3_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		add(
       			$current, 
       			"then",
        		lv_then_3_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIfThenElseAccess().getRightCurlyBracketKeyword_4());
    }
(	otherlv_5='Else {' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfThenElseAccess().getElseKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getElseInstructionParserRuleCall_5_1_0()); 
	    }
		lv_else_6_0=ruleInstruction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		add(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"Instruction");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIfThenElseAccess().getRightCurlyBracketKeyword_5_2());
    }
)?)
;





// Entry rule entryRuleAffectation
entryRuleAffectation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAffectationRule()); }
	 iv_ruleAffectation=ruleAffectation 
	 { $current=$iv_ruleAffectation.current; } 
	 EOF 
;

// Rule Affectation
ruleAffectation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_0_0()); 
	    }
		lv_variable_0_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationRule());
	        }
       		set(
       			$current, 
       			"variable",
        		lv_variable_0_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAffectationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAffectationAccess().getElemElemParserRuleCall_2_0()); 
	    }
		lv_elem_2_0=ruleElem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAffectationRule());
	        }
       		set(
       			$current, 
       			"elem",
        		lv_elem_2_0, 
        		"Elem");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExec
entryRuleExec returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExecRule()); }
	 iv_ruleExec=ruleExec 
	 { $current=$iv_ruleExec.current; } 
	 EOF 
;

// Rule Exec
ruleExec returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Exec' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExecAccess().getExecKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getExecAccess().getSequenceSequenceCrossReference_1_0()); 
	}

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExecAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		lv_params_3_0=RULE_STRING
		{
			newLeafNode(lv_params_3_0, grammarAccess.getExecAccess().getParamsSTRINGTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"STRING");
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExecAccess().getCommaKeyword_2_2_0());
    }
(
(
		lv_params_5_0=RULE_STRING
		{
			newLeafNode(lv_params_5_0, grammarAccess.getExecAccess().getParamsSTRINGTerminalRuleCall_2_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getExecRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"STRING");
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getExecAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleFill
entryRuleFill returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFillRule()); }
	 iv_ruleFill=ruleFill 
	 { $current=$iv_ruleFill.current; } 
	 EOF 
;

// Rule Fill
ruleFill returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Fill' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFillAccess().getFillKeyword_0());
    }
(
(
		lv_field_1_0=RULE_STRING
		{
			newLeafNode(lv_field_1_0, grammarAccess.getFillAccess().getFieldSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFillRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"field",
        		lv_field_1_0, 
        		"STRING");
	    }

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFillAccess().getWithKeyword_2());
    }
((
(
		lv_value_3_0=RULE_STRING
		{
			newLeafNode(lv_value_3_0, grammarAccess.getFillAccess().getValueSTRINGTerminalRuleCall_3_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFillRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFillRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getFillAccess().getParamVariableCrossReference_3_1_0()); 
	}

)
)))
;





// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	 iv_ruleCheck=ruleCheck 
	 { $current=$iv_ruleCheck.current; } 
	 EOF 
;

// Rule Check
ruleCheck returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Check' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCheckAccess().getCheckKeyword_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getCheckboxGetCheckboxParserRuleCall_1_0_0()); 
	    }
		lv_checkbox_1_1=ruleGetCheckbox		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		set(
       			$current, 
       			"checkbox",
        		lv_checkbox_1_1, 
        		"GetCheckbox");
	        afterParserOrEnumRuleCall();
	    }

    |		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheckRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getCheckAccess().getCheckboxVariableCrossReference_1_0_1()); 
	}

)

)
))
;





// Entry rule entryRuleClick
entryRuleClick returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClickRule()); }
	 iv_ruleClick=ruleClick 
	 { $current=$iv_ruleClick.current; } 
	 EOF 
;

// Rule Click
ruleClick returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Click' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClickAccess().getClickKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getClickRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getClickAccess().getElemElemCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleVerify
entryRuleVerify returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVerifyRule()); }
	 iv_ruleVerify=ruleVerify 
	 { $current=$iv_ruleVerify.current; } 
	 EOF 
;

// Rule Verify
ruleVerify returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Verify' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVerifyAccess().getVerifyKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVerifyAccess().getConditionConditionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVerifyRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleGoTo
entryRuleGoTo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGoToRule()); }
	 iv_ruleGoTo=ruleGoTo 
	 { $current=$iv_ruleGoTo.current; } 
	 EOF 
;

// Rule GoTo
ruleGoTo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GoTo' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGoToAccess().getGoToKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGoToAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGoToRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGoToRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGoToAccess().getLinkVariableCrossReference_1_1_0_0()); 
	}

    |		{ 
	        newCompositeNode(grammarAccess.getGoToAccess().getLinkGetLinkParserRuleCall_1_1_0_1()); 
	    }
		lv_link_2_4=ruleGetLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGoToRule());
	        }
       		set(
       			$current, 
       			"link",
        		lv_link_2_4, 
        		"GetLink");
	        afterParserOrEnumRuleCall();
	    }

)

)
)))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='Not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConditionAccess().getNotKeyword_0());
    }
)?(
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getUnaryConditionParserRuleCall_1_0()); 
    }
    this_UnaryCondition_1=ruleUnaryCondition
    { 
        $current = $this_UnaryCondition_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getBinaryConditionParserRuleCall_1_1()); 
    }
    this_BinaryCondition_2=ruleBinaryCondition
    { 
        $current = $this_BinaryCondition_2.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleUnaryCondition
entryRuleUnaryCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnaryConditionRule()); }
	 iv_ruleUnaryCondition=ruleUnaryCondition 
	 { $current=$iv_ruleUnaryCondition.current; } 
	 EOF 
;

// Rule UnaryCondition
ruleUnaryCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getUnaryConditionAccess().getOpUnaryOpEnumRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleUnaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnaryConditionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"UnaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getUnaryConditionRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getUnaryConditionAccess().getElemElemCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleBinaryCondition
entryRuleBinaryCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinaryConditionRule()); }
	 iv_ruleBinaryCondition=ruleBinaryCondition 
	 { $current=$iv_ruleBinaryCondition.current; } 
	 EOF 
;

// Rule BinaryCondition
ruleBinaryCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryConditionAccess().getElemElemParserRuleCall_0_0()); 
	    }
		lv_elem_0_0=ruleElem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryConditionRule());
	        }
       		set(
       			$current, 
       			"elem",
        		lv_elem_0_0, 
        		"Elem");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBinaryConditionAccess().getOpBinaryOpEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleBinaryOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinaryConditionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"BinaryOp");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getBinaryConditionAccess().getValueSTRINGTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBinaryConditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBinaryConditionRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getBinaryConditionAccess().getParamVariableCrossReference_2_1_0()); 
	}

)
)))
;





// Entry rule entryRuleElem
entryRuleElem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElemRule()); }
	 iv_ruleElem=ruleElem 
	 { $current=$iv_ruleElem.current; } 
	 EOF 
;

// Rule Elem
ruleElem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElemAccess().getGetButtonParserRuleCall_0()); 
    }
    this_GetButton_0=ruleGetButton
    { 
        $current = $this_GetButton_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElemAccess().getGetLinkParserRuleCall_1()); 
    }
    this_GetLink_1=ruleGetLink
    { 
        $current = $this_GetLink_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElemAccess().getGetCheckboxParserRuleCall_2()); 
    }
    this_GetCheckbox_2=ruleGetCheckbox
    { 
        $current = $this_GetCheckbox_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElemAccess().getGetTextParserRuleCall_3()); 
    }
    this_GetText_3=ruleGetText
    { 
        $current = $this_GetText_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElemAccess().getVariableParserRuleCall_4()); 
    }
    this_Variable_4=ruleVariable
    { 
        $current = $this_Variable_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGetButton
entryRuleGetButton returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetButtonRule()); }
	 iv_ruleGetButton=ruleGetButton 
	 { $current=$iv_ruleGetButton.current; } 
	 EOF 
;

// Rule GetButton
ruleGetButton returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GetButton' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetButtonAccess().getGetButtonKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGetButtonAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetButtonRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetButtonRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGetButtonAccess().getVarVariableCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleGetLink
entryRuleGetLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetLinkRule()); }
	 iv_ruleGetLink=ruleGetLink 
	 { $current=$iv_ruleGetLink.current; } 
	 EOF 
;

// Rule GetLink
ruleGetLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GetLink' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetLinkAccess().getGetLinkKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGetLinkAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetLinkRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGetLinkAccess().getVarVariableCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleGetCheckbox
entryRuleGetCheckbox returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetCheckboxRule()); }
	 iv_ruleGetCheckbox=ruleGetCheckbox 
	 { $current=$iv_ruleGetCheckbox.current; } 
	 EOF 
;

// Rule GetCheckbox
ruleGetCheckbox returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GetCheckbox' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetCheckboxAccess().getGetCheckboxKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGetCheckboxAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetCheckboxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetCheckboxRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGetCheckboxAccess().getVarVariableCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleGetText
entryRuleGetText returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetTextRule()); }
	 iv_ruleGetText=ruleGetText 
	 { $current=$iv_ruleGetText.current; } 
	 EOF 
;

// Rule GetText
ruleGetText returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GetText' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetTextAccess().getGetTextKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGetTextAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetTextRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetTextRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGetTextAccess().getVarVariableCrossReference_1_1_0()); 
	}

)
)))
;





// Entry rule entryRuleElems
entryRuleElems returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getElemsRule()); }
	 iv_ruleElems=ruleElems 
	 { $current=$iv_ruleElems.current; } 
	 EOF 
;

// Rule Elems
ruleElems returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElemsAccess().getGetButtonsParserRuleCall_0()); 
    }
    this_GetButtons_0=ruleGetButtons
    { 
        $current = $this_GetButtons_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElemsAccess().getGetCheckboxesParserRuleCall_1()); 
    }
    this_GetCheckboxes_1=ruleGetCheckboxes
    { 
        $current = $this_GetCheckboxes_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getElemsAccess().getGetLinksParserRuleCall_2()); 
    }
    this_GetLinks_2=ruleGetLinks
    { 
        $current = $this_GetLinks_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleGetButtons
entryRuleGetButtons returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetButtonsRule()); }
	 iv_ruleGetButtons=ruleGetButtons 
	 { $current=$iv_ruleGetButtons.current; } 
	 EOF 
;

// Rule GetButtons
ruleGetButtons returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GetButtons' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetButtonsAccess().getGetButtonsKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGetButtonsAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetButtonsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetButtonsRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGetButtonsAccess().getVarVariableCrossReference_1_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleGetCheckboxes
entryRuleGetCheckboxes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetCheckboxesRule()); }
	 iv_ruleGetCheckboxes=ruleGetCheckboxes 
	 { $current=$iv_ruleGetCheckboxes.current; } 
	 EOF 
;

// Rule GetCheckboxes
ruleGetCheckboxes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GetCheckboxes' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetCheckboxesAccess().getGetCheckboxesKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGetCheckboxesAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetCheckboxesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetCheckboxesRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGetCheckboxesAccess().getVarVariableCrossReference_1_1_0()); 
	}

)
))?)
;





// Entry rule entryRuleGetLinks
entryRuleGetLinks returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGetLinksRule()); }
	 iv_ruleGetLinks=ruleGetLinks 
	 { $current=$iv_ruleGetLinks.current; } 
	 EOF 
;

// Rule GetLinks
ruleGetLinks returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='GetLinks' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGetLinksAccess().getGetLinksKeyword_0());
    }
((
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getGetLinksAccess().getValueSTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetLinksRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getGetLinksRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getGetLinksAccess().getVarVariableCrossReference_1_1_0()); 
	}

)
))?)
;





// Rule BinaryOp
ruleBinaryOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Contains' 
	{
        $current = grammarAccess.getBinaryOpAccess().getContainsEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryOpAccess().getContainsEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Equals' 
	{
        $current = grammarAccess.getBinaryOpAccess().getEqualsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryOpAccess().getEqualsEnumLiteralDeclaration_1()); 
    }
));



// Rule UnaryOp
ruleUnaryOp returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='IsChecked' 
	{
        $current = grammarAccess.getUnaryOpAccess().getIsCheckedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryOpAccess().getIsCheckedEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='IsEnabled' 
	{
        $current = grammarAccess.getUnaryOpAccess().getIsEnabledEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUnaryOpAccess().getIsEnabledEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Exists' 
	{
        $current = grammarAccess.getUnaryOpAccess().getExistsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUnaryOpAccess().getExistsEnumLiteralDeclaration_2()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



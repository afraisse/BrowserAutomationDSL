grammar org.xtext.emn.selenium.SEL with org.eclipse.xtext.common.Terminals

generate sel "http://www.xtext.org/emn/selenium/SEL"

////////////////////////////////////////////////////////////////////////////
// PROGRAM /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

Program:
    (sequences+=Sequence | tests+=Test)*
;

////////////////////////////////////////////////////////////////////////////
// MAIN INSTRUCTIONS ///////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

Test:
    'Test' browser=STRING '{'
        body+=Exec*
    '}'    
;

Sequence:
    'Sequence' name=ID ('(' parameters+=Variable (',' parameters+=Variable)* ')')? '{'
        body+=Instruction*
    '}'
;

Variable:
    name=ID
;

////////////////////////////////////////////////////////////////////////////
// INSTRUCTIONS ////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

Instruction:
    Sequence | ForAll | DoWhile | IfThenElse |
    Affectation | Exec | Fill | Check | Click | Verify | GoTo
;

// BLOCS

ForAll:
    'ForAll' elems=Elems it=Variable '{'
        body+=Instruction*
    '}'
;

DoWhile:
    'Do {'
        body+=Instruction*
    '} While (' condition=Condition ')'
;

IfThenElse:
    'If' condition=Condition '{'
        then+=Instruction*
    '}' 
    ('Else {'
        else+=Instruction*
    '}')?
;

// INSTRUCTIONS

Affectation:
    variable=Variable '=' value=Expression
;

Exec:
    'Exec' sequence=[Sequence] ('('params+=Value (',' params+=Value)* ')')?
;

Fill:
    'Fill' field=(GetInput|Variable) 'with' value=Value
;

Check:
    'Check' checkbox=(GetCheckbox|Variable) 
;

Click:
    'Click' button=(GetButton|Variable)
;

GoTo:
    'GoTo' link=(GetLink|Variable)    
;

Verify:
    'Verify' condition=Condition 'as' label=STRING
;

// CONDITIONS

Condition:
    (UnaryCondition | BinaryCondition | NotCondition)
;

NotCondition:
	'Not' condition=Condition
;

UnaryCondition:
    op=UnaryOp elem=Expression
;

BinaryCondition:
    elem=Expression op=BinaryOp value=Value
;

enum BinaryOp:
    Contains = 'Contains' | Equals =  'Equals'
;

enum UnaryOp:
    IsChecked = 'IsChecked' | IsEnabled = 'IsEnabled' | Exists = 'Exists'
;

////////////////////////////////////////////////////////////////////////////
// Expression ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////

// Quelque chose qui peut retourner une valeur
Expression:
	GetButton | GetLink | GetCheckbox | GetText | GetInput | Variable
;


Value:
    (str=STRING | var=[Variable])
;

GetButton:
    'GetButton' value=Value
;

GetLink:
    'GetLink' value=Value
;

GetCheckbox:
    'GetCheckbox' value=Value
;

GetText:
    'GetText' value=Value
;

GetInput:
	'GetInput' value=Value
;

Elems:
    GetButtons | GetCheckboxes | GetLinks 
;

GetButtons:
    'GetButtons' value=Value?
;

GetCheckboxes:
    'GetCheckboxes' value=Value?
;

GetLinks:
    'GetLinks' value=Value?
;
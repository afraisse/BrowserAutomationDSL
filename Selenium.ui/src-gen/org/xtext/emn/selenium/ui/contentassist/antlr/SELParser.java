/*
 * generated by Xtext
 */
package org.xtext.emn.selenium.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.emn.selenium.services.SELGrammarAccess;

public class SELParser extends AbstractContentAssistParser {
	
	@Inject
	private SELGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.emn.selenium.ui.contentassist.antlr.internal.InternalSELParser createParser() {
		org.xtext.emn.selenium.ui.contentassist.antlr.internal.InternalSELParser result = new org.xtext.emn.selenium.ui.contentassist.antlr.internal.InternalSELParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProgramAccess().getAlternatives(), "rule__Program__Alternatives");
					put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
					put(grammarAccess.getFillAccess().getAlternatives_3(), "rule__Fill__Alternatives_3");
					put(grammarAccess.getCheckAccess().getCheckboxAlternatives_1_0(), "rule__Check__CheckboxAlternatives_1_0");
					put(grammarAccess.getGoToAccess().getAlternatives_1(), "rule__GoTo__Alternatives_1");
					put(grammarAccess.getGoToAccess().getLinkAlternatives_1_1_0(), "rule__GoTo__LinkAlternatives_1_1_0");
					put(grammarAccess.getConditionAccess().getAlternatives_1(), "rule__Condition__Alternatives_1");
					put(grammarAccess.getBinaryConditionAccess().getAlternatives_2(), "rule__BinaryCondition__Alternatives_2");
					put(grammarAccess.getElemAccess().getAlternatives(), "rule__Elem__Alternatives");
					put(grammarAccess.getGetButtonAccess().getAlternatives_1(), "rule__GetButton__Alternatives_1");
					put(grammarAccess.getGetLinkAccess().getAlternatives_1(), "rule__GetLink__Alternatives_1");
					put(grammarAccess.getGetCheckboxAccess().getAlternatives_1(), "rule__GetCheckbox__Alternatives_1");
					put(grammarAccess.getGetTextAccess().getAlternatives_1(), "rule__GetText__Alternatives_1");
					put(grammarAccess.getElemsAccess().getAlternatives(), "rule__Elems__Alternatives");
					put(grammarAccess.getGetButtonsAccess().getAlternatives_1(), "rule__GetButtons__Alternatives_1");
					put(grammarAccess.getGetCheckboxesAccess().getAlternatives_1(), "rule__GetCheckboxes__Alternatives_1");
					put(grammarAccess.getGetLinksAccess().getAlternatives_1(), "rule__GetLinks__Alternatives_1");
					put(grammarAccess.getBinaryOpAccess().getAlternatives(), "rule__BinaryOp__Alternatives");
					put(grammarAccess.getUnaryOpAccess().getAlternatives(), "rule__UnaryOp__Alternatives");
					put(grammarAccess.getTestAccess().getGroup(), "rule__Test__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup(), "rule__Sequence__Group__0");
					put(grammarAccess.getSequenceAccess().getGroup_2(), "rule__Sequence__Group_2__0");
					put(grammarAccess.getSequenceAccess().getGroup_2_2(), "rule__Sequence__Group_2_2__0");
					put(grammarAccess.getForAllAccess().getGroup(), "rule__ForAll__Group__0");
					put(grammarAccess.getDoWhileAccess().getGroup(), "rule__DoWhile__Group__0");
					put(grammarAccess.getIfThenElseAccess().getGroup(), "rule__IfThenElse__Group__0");
					put(grammarAccess.getIfThenElseAccess().getGroup_5(), "rule__IfThenElse__Group_5__0");
					put(grammarAccess.getAffectationAccess().getGroup(), "rule__Affectation__Group__0");
					put(grammarAccess.getExecAccess().getGroup(), "rule__Exec__Group__0");
					put(grammarAccess.getExecAccess().getGroup_2(), "rule__Exec__Group_2__0");
					put(grammarAccess.getExecAccess().getGroup_2_2(), "rule__Exec__Group_2_2__0");
					put(grammarAccess.getFillAccess().getGroup(), "rule__Fill__Group__0");
					put(grammarAccess.getCheckAccess().getGroup(), "rule__Check__Group__0");
					put(grammarAccess.getClickAccess().getGroup(), "rule__Click__Group__0");
					put(grammarAccess.getVerifyAccess().getGroup(), "rule__Verify__Group__0");
					put(grammarAccess.getGoToAccess().getGroup(), "rule__GoTo__Group__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getUnaryConditionAccess().getGroup(), "rule__UnaryCondition__Group__0");
					put(grammarAccess.getBinaryConditionAccess().getGroup(), "rule__BinaryCondition__Group__0");
					put(grammarAccess.getGetButtonAccess().getGroup(), "rule__GetButton__Group__0");
					put(grammarAccess.getGetLinkAccess().getGroup(), "rule__GetLink__Group__0");
					put(grammarAccess.getGetCheckboxAccess().getGroup(), "rule__GetCheckbox__Group__0");
					put(grammarAccess.getGetTextAccess().getGroup(), "rule__GetText__Group__0");
					put(grammarAccess.getGetButtonsAccess().getGroup(), "rule__GetButtons__Group__0");
					put(grammarAccess.getGetCheckboxesAccess().getGroup(), "rule__GetCheckboxes__Group__0");
					put(grammarAccess.getGetLinksAccess().getGroup(), "rule__GetLinks__Group__0");
					put(grammarAccess.getProgramAccess().getSequencesAssignment_0(), "rule__Program__SequencesAssignment_0");
					put(grammarAccess.getProgramAccess().getTestsAssignment_1(), "rule__Program__TestsAssignment_1");
					put(grammarAccess.getTestAccess().getBrowserAssignment_1(), "rule__Test__BrowserAssignment_1");
					put(grammarAccess.getTestAccess().getBodyAssignment_3(), "rule__Test__BodyAssignment_3");
					put(grammarAccess.getSequenceAccess().getNameAssignment_1(), "rule__Sequence__NameAssignment_1");
					put(grammarAccess.getSequenceAccess().getParametersAssignment_2_1(), "rule__Sequence__ParametersAssignment_2_1");
					put(grammarAccess.getSequenceAccess().getParametersAssignment_2_2_1(), "rule__Sequence__ParametersAssignment_2_2_1");
					put(grammarAccess.getSequenceAccess().getBodyAssignment_4(), "rule__Sequence__BodyAssignment_4");
					put(grammarAccess.getVariableAccess().getNameAssignment(), "rule__Variable__NameAssignment");
					put(grammarAccess.getForAllAccess().getElemsAssignment_1(), "rule__ForAll__ElemsAssignment_1");
					put(grammarAccess.getForAllAccess().getItAssignment_2(), "rule__ForAll__ItAssignment_2");
					put(grammarAccess.getForAllAccess().getBodyAssignment_4(), "rule__ForAll__BodyAssignment_4");
					put(grammarAccess.getDoWhileAccess().getBodyAssignment_1(), "rule__DoWhile__BodyAssignment_1");
					put(grammarAccess.getDoWhileAccess().getConditionAssignment_3(), "rule__DoWhile__ConditionAssignment_3");
					put(grammarAccess.getIfThenElseAccess().getConditionAssignment_1(), "rule__IfThenElse__ConditionAssignment_1");
					put(grammarAccess.getIfThenElseAccess().getThenAssignment_3(), "rule__IfThenElse__ThenAssignment_3");
					put(grammarAccess.getIfThenElseAccess().getElseAssignment_5_1(), "rule__IfThenElse__ElseAssignment_5_1");
					put(grammarAccess.getAffectationAccess().getVariableAssignment_0(), "rule__Affectation__VariableAssignment_0");
					put(grammarAccess.getAffectationAccess().getElemAssignment_2(), "rule__Affectation__ElemAssignment_2");
					put(grammarAccess.getExecAccess().getSequenceAssignment_1(), "rule__Exec__SequenceAssignment_1");
					put(grammarAccess.getExecAccess().getParamsAssignment_2_1(), "rule__Exec__ParamsAssignment_2_1");
					put(grammarAccess.getExecAccess().getParamsAssignment_2_2_1(), "rule__Exec__ParamsAssignment_2_2_1");
					put(grammarAccess.getFillAccess().getFieldAssignment_1(), "rule__Fill__FieldAssignment_1");
					put(grammarAccess.getFillAccess().getValueAssignment_3_0(), "rule__Fill__ValueAssignment_3_0");
					put(grammarAccess.getFillAccess().getParamAssignment_3_1(), "rule__Fill__ParamAssignment_3_1");
					put(grammarAccess.getCheckAccess().getCheckboxAssignment_1(), "rule__Check__CheckboxAssignment_1");
					put(grammarAccess.getClickAccess().getElemAssignment_1(), "rule__Click__ElemAssignment_1");
					put(grammarAccess.getVerifyAccess().getConditionAssignment_1(), "rule__Verify__ConditionAssignment_1");
					put(grammarAccess.getGoToAccess().getValueAssignment_1_0(), "rule__GoTo__ValueAssignment_1_0");
					put(grammarAccess.getGoToAccess().getLinkAssignment_1_1(), "rule__GoTo__LinkAssignment_1_1");
					put(grammarAccess.getUnaryConditionAccess().getOpAssignment_0(), "rule__UnaryCondition__OpAssignment_0");
					put(grammarAccess.getUnaryConditionAccess().getElemAssignment_1(), "rule__UnaryCondition__ElemAssignment_1");
					put(grammarAccess.getBinaryConditionAccess().getElemAssignment_0(), "rule__BinaryCondition__ElemAssignment_0");
					put(grammarAccess.getBinaryConditionAccess().getOpAssignment_1(), "rule__BinaryCondition__OpAssignment_1");
					put(grammarAccess.getBinaryConditionAccess().getValueAssignment_2_0(), "rule__BinaryCondition__ValueAssignment_2_0");
					put(grammarAccess.getBinaryConditionAccess().getParamAssignment_2_1(), "rule__BinaryCondition__ParamAssignment_2_1");
					put(grammarAccess.getGetButtonAccess().getValueAssignment_1_0(), "rule__GetButton__ValueAssignment_1_0");
					put(grammarAccess.getGetButtonAccess().getVarAssignment_1_1(), "rule__GetButton__VarAssignment_1_1");
					put(grammarAccess.getGetLinkAccess().getValueAssignment_1_0(), "rule__GetLink__ValueAssignment_1_0");
					put(grammarAccess.getGetLinkAccess().getVarAssignment_1_1(), "rule__GetLink__VarAssignment_1_1");
					put(grammarAccess.getGetCheckboxAccess().getValueAssignment_1_0(), "rule__GetCheckbox__ValueAssignment_1_0");
					put(grammarAccess.getGetCheckboxAccess().getVarAssignment_1_1(), "rule__GetCheckbox__VarAssignment_1_1");
					put(grammarAccess.getGetTextAccess().getValueAssignment_1_0(), "rule__GetText__ValueAssignment_1_0");
					put(grammarAccess.getGetTextAccess().getVarAssignment_1_1(), "rule__GetText__VarAssignment_1_1");
					put(grammarAccess.getGetButtonsAccess().getValueAssignment_1_0(), "rule__GetButtons__ValueAssignment_1_0");
					put(grammarAccess.getGetButtonsAccess().getVarAssignment_1_1(), "rule__GetButtons__VarAssignment_1_1");
					put(grammarAccess.getGetCheckboxesAccess().getValueAssignment_1_0(), "rule__GetCheckboxes__ValueAssignment_1_0");
					put(grammarAccess.getGetCheckboxesAccess().getVarAssignment_1_1(), "rule__GetCheckboxes__VarAssignment_1_1");
					put(grammarAccess.getGetLinksAccess().getValueAssignment_1_0(), "rule__GetLinks__ValueAssignment_1_0");
					put(grammarAccess.getGetLinksAccess().getVarAssignment_1_1(), "rule__GetLinks__VarAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.emn.selenium.ui.contentassist.antlr.internal.InternalSELParser typedParser = (org.xtext.emn.selenium.ui.contentassist.antlr.internal.InternalSELParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SELGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SELGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

/*
 * generated by Xtext
 */
grammar InternalSEL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.emn.selenium.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.emn.selenium.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.emn.selenium.services.SELGrammarAccess;

}

@parser::members {
 
 	private SELGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(SELGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getAlternatives()); }
(rule__Program__Alternatives)*
{ after(grammarAccess.getProgramAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTest
entryRuleTest 
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getGroup()); }
(rule__Test__Group__0)
{ after(grammarAccess.getTestAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequence
entryRuleSequence 
:
{ before(grammarAccess.getSequenceRule()); }
	 ruleSequence
{ after(grammarAccess.getSequenceRule()); } 
	 EOF 
;

// Rule Sequence
ruleSequence
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceAccess().getGroup()); }
(rule__Sequence__Group__0)
{ after(grammarAccess.getSequenceAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment()); }
(rule__Variable__NameAssignment)
{ after(grammarAccess.getVariableAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInstruction
entryRuleInstruction 
:
{ before(grammarAccess.getInstructionRule()); }
	 ruleInstruction
{ after(grammarAccess.getInstructionRule()); } 
	 EOF 
;

// Rule Instruction
ruleInstruction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstructionAccess().getAlternatives()); }
(rule__Instruction__Alternatives)
{ after(grammarAccess.getInstructionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForAll
entryRuleForAll 
:
{ before(grammarAccess.getForAllRule()); }
	 ruleForAll
{ after(grammarAccess.getForAllRule()); } 
	 EOF 
;

// Rule ForAll
ruleForAll
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForAllAccess().getGroup()); }
(rule__ForAll__Group__0)
{ after(grammarAccess.getForAllAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoWhile
entryRuleDoWhile 
:
{ before(grammarAccess.getDoWhileRule()); }
	 ruleDoWhile
{ after(grammarAccess.getDoWhileRule()); } 
	 EOF 
;

// Rule DoWhile
ruleDoWhile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoWhileAccess().getGroup()); }
(rule__DoWhile__Group__0)
{ after(grammarAccess.getDoWhileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfThenElse
entryRuleIfThenElse 
:
{ before(grammarAccess.getIfThenElseRule()); }
	 ruleIfThenElse
{ after(grammarAccess.getIfThenElseRule()); } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfThenElseAccess().getGroup()); }
(rule__IfThenElse__Group__0)
{ after(grammarAccess.getIfThenElseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAffectation
entryRuleAffectation 
:
{ before(grammarAccess.getAffectationRule()); }
	 ruleAffectation
{ after(grammarAccess.getAffectationRule()); } 
	 EOF 
;

// Rule Affectation
ruleAffectation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAffectationAccess().getGroup()); }
(rule__Affectation__Group__0)
{ after(grammarAccess.getAffectationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExec
entryRuleExec 
:
{ before(grammarAccess.getExecRule()); }
	 ruleExec
{ after(grammarAccess.getExecRule()); } 
	 EOF 
;

// Rule Exec
ruleExec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExecAccess().getGroup()); }
(rule__Exec__Group__0)
{ after(grammarAccess.getExecAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFill
entryRuleFill 
:
{ before(grammarAccess.getFillRule()); }
	 ruleFill
{ after(grammarAccess.getFillRule()); } 
	 EOF 
;

// Rule Fill
ruleFill
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFillAccess().getGroup()); }
(rule__Fill__Group__0)
{ after(grammarAccess.getFillAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCheck
entryRuleCheck 
:
{ before(grammarAccess.getCheckRule()); }
	 ruleCheck
{ after(grammarAccess.getCheckRule()); } 
	 EOF 
;

// Rule Check
ruleCheck
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCheckAccess().getGroup()); }
(rule__Check__Group__0)
{ after(grammarAccess.getCheckAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClick
entryRuleClick 
:
{ before(grammarAccess.getClickRule()); }
	 ruleClick
{ after(grammarAccess.getClickRule()); } 
	 EOF 
;

// Rule Click
ruleClick
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClickAccess().getGroup()); }
(rule__Click__Group__0)
{ after(grammarAccess.getClickAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVerify
entryRuleVerify 
:
{ before(grammarAccess.getVerifyRule()); }
	 ruleVerify
{ after(grammarAccess.getVerifyRule()); } 
	 EOF 
;

// Rule Verify
ruleVerify
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVerifyAccess().getGroup()); }
(rule__Verify__Group__0)
{ after(grammarAccess.getVerifyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGoTo
entryRuleGoTo 
:
{ before(grammarAccess.getGoToRule()); }
	 ruleGoTo
{ after(grammarAccess.getGoToRule()); } 
	 EOF 
;

// Rule GoTo
ruleGoTo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGoToAccess().getGroup()); }
(rule__GoTo__Group__0)
{ after(grammarAccess.getGoToAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getGroup()); }
(rule__Condition__Group__0)
{ after(grammarAccess.getConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnaryCondition
entryRuleUnaryCondition 
:
{ before(grammarAccess.getUnaryConditionRule()); }
	 ruleUnaryCondition
{ after(grammarAccess.getUnaryConditionRule()); } 
	 EOF 
;

// Rule UnaryCondition
ruleUnaryCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnaryConditionAccess().getGroup()); }
(rule__UnaryCondition__Group__0)
{ after(grammarAccess.getUnaryConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBinaryCondition
entryRuleBinaryCondition 
:
{ before(grammarAccess.getBinaryConditionRule()); }
	 ruleBinaryCondition
{ after(grammarAccess.getBinaryConditionRule()); } 
	 EOF 
;

// Rule BinaryCondition
ruleBinaryCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBinaryConditionAccess().getGroup()); }
(rule__BinaryCondition__Group__0)
{ after(grammarAccess.getBinaryConditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElem
entryRuleElem 
:
{ before(grammarAccess.getElemRule()); }
	 ruleElem
{ after(grammarAccess.getElemRule()); } 
	 EOF 
;

// Rule Elem
ruleElem
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElemAccess().getAlternatives()); }
(rule__Elem__Alternatives)
{ after(grammarAccess.getElemAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetButton
entryRuleGetButton 
:
{ before(grammarAccess.getGetButtonRule()); }
	 ruleGetButton
{ after(grammarAccess.getGetButtonRule()); } 
	 EOF 
;

// Rule GetButton
ruleGetButton
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetButtonAccess().getGroup()); }
(rule__GetButton__Group__0)
{ after(grammarAccess.getGetButtonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetLink
entryRuleGetLink 
:
{ before(grammarAccess.getGetLinkRule()); }
	 ruleGetLink
{ after(grammarAccess.getGetLinkRule()); } 
	 EOF 
;

// Rule GetLink
ruleGetLink
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetLinkAccess().getGroup()); }
(rule__GetLink__Group__0)
{ after(grammarAccess.getGetLinkAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetCheckbox
entryRuleGetCheckbox 
:
{ before(grammarAccess.getGetCheckboxRule()); }
	 ruleGetCheckbox
{ after(grammarAccess.getGetCheckboxRule()); } 
	 EOF 
;

// Rule GetCheckbox
ruleGetCheckbox
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetCheckboxAccess().getGroup()); }
(rule__GetCheckbox__Group__0)
{ after(grammarAccess.getGetCheckboxAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetText
entryRuleGetText 
:
{ before(grammarAccess.getGetTextRule()); }
	 ruleGetText
{ after(grammarAccess.getGetTextRule()); } 
	 EOF 
;

// Rule GetText
ruleGetText
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetTextAccess().getGroup()); }
(rule__GetText__Group__0)
{ after(grammarAccess.getGetTextAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElems
entryRuleElems 
:
{ before(grammarAccess.getElemsRule()); }
	 ruleElems
{ after(grammarAccess.getElemsRule()); } 
	 EOF 
;

// Rule Elems
ruleElems
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElemsAccess().getAlternatives()); }
(rule__Elems__Alternatives)
{ after(grammarAccess.getElemsAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetButtons
entryRuleGetButtons 
:
{ before(grammarAccess.getGetButtonsRule()); }
	 ruleGetButtons
{ after(grammarAccess.getGetButtonsRule()); } 
	 EOF 
;

// Rule GetButtons
ruleGetButtons
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetButtonsAccess().getGroup()); }
(rule__GetButtons__Group__0)
{ after(grammarAccess.getGetButtonsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetCheckboxes
entryRuleGetCheckboxes 
:
{ before(grammarAccess.getGetCheckboxesRule()); }
	 ruleGetCheckboxes
{ after(grammarAccess.getGetCheckboxesRule()); } 
	 EOF 
;

// Rule GetCheckboxes
ruleGetCheckboxes
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetCheckboxesAccess().getGroup()); }
(rule__GetCheckboxes__Group__0)
{ after(grammarAccess.getGetCheckboxesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetLinks
entryRuleGetLinks 
:
{ before(grammarAccess.getGetLinksRule()); }
	 ruleGetLinks
{ after(grammarAccess.getGetLinksRule()); } 
	 EOF 
;

// Rule GetLinks
ruleGetLinks
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetLinksAccess().getGroup()); }
(rule__GetLinks__Group__0)
{ after(grammarAccess.getGetLinksAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule BinaryOp
ruleBinaryOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOpAccess().getAlternatives()); }
(rule__BinaryOp__Alternatives)
{ after(grammarAccess.getBinaryOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule UnaryOp
ruleUnaryOp
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOpAccess().getAlternatives()); }
(rule__UnaryOp__Alternatives)
{ after(grammarAccess.getUnaryOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSequencesAssignment_0()); }
(rule__Program__SequencesAssignment_0)
{ after(grammarAccess.getProgramAccess().getSequencesAssignment_0()); }
)

    |(
{ before(grammarAccess.getProgramAccess().getTestsAssignment_1()); }
(rule__Program__TestsAssignment_1)
{ after(grammarAccess.getProgramAccess().getTestsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Instruction__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstructionAccess().getSequenceParserRuleCall_0()); }
	ruleSequence
{ after(grammarAccess.getInstructionAccess().getSequenceParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getForAllParserRuleCall_1()); }
	ruleForAll
{ after(grammarAccess.getInstructionAccess().getForAllParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getDoWhileParserRuleCall_2()); }
	ruleDoWhile
{ after(grammarAccess.getInstructionAccess().getDoWhileParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getIfThenElseParserRuleCall_3()); }
	ruleIfThenElse
{ after(grammarAccess.getInstructionAccess().getIfThenElseParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getAffectationParserRuleCall_4()); }
	ruleAffectation
{ after(grammarAccess.getInstructionAccess().getAffectationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getExecParserRuleCall_5()); }
	ruleExec
{ after(grammarAccess.getInstructionAccess().getExecParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getFillParserRuleCall_6()); }
	ruleFill
{ after(grammarAccess.getInstructionAccess().getFillParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getCheckParserRuleCall_7()); }
	ruleCheck
{ after(grammarAccess.getInstructionAccess().getCheckParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getClickParserRuleCall_8()); }
	ruleClick
{ after(grammarAccess.getInstructionAccess().getClickParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getVerifyParserRuleCall_9()); }
	ruleVerify
{ after(grammarAccess.getInstructionAccess().getVerifyParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getInstructionAccess().getGoToParserRuleCall_10()); }
	ruleGoTo
{ after(grammarAccess.getInstructionAccess().getGoToParserRuleCall_10()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getValueAssignment_3_0()); }
(rule__Fill__ValueAssignment_3_0)
{ after(grammarAccess.getFillAccess().getValueAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getFillAccess().getParamAssignment_3_1()); }
(rule__Fill__ParamAssignment_3_1)
{ after(grammarAccess.getFillAccess().getParamAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__CheckboxAlternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckboxGetCheckboxParserRuleCall_1_0_0()); }
	ruleGetCheckbox
{ after(grammarAccess.getCheckAccess().getCheckboxGetCheckboxParserRuleCall_1_0_0()); }
)

    |(
{ before(grammarAccess.getCheckAccess().getCheckboxVariableCrossReference_1_0_1()); }
(

)
{ after(grammarAccess.getCheckAccess().getCheckboxVariableCrossReference_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getValueAssignment_1_0()); }
(rule__GoTo__ValueAssignment_1_0)
{ after(grammarAccess.getGoToAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGoToAccess().getLinkAssignment_1_1()); }
(rule__GoTo__LinkAssignment_1_1)
{ after(grammarAccess.getGoToAccess().getLinkAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__LinkAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getLinkVariableCrossReference_1_1_0_0()); }
(

)
{ after(grammarAccess.getGoToAccess().getLinkVariableCrossReference_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getGoToAccess().getLinkGetLinkParserRuleCall_1_1_0_1()); }
	ruleGetLink
{ after(grammarAccess.getGoToAccess().getLinkGetLinkParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getUnaryConditionParserRuleCall_1_0()); }
	ruleUnaryCondition
{ after(grammarAccess.getConditionAccess().getUnaryConditionParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getBinaryConditionParserRuleCall_1_1()); }
	ruleBinaryCondition
{ after(grammarAccess.getConditionAccess().getBinaryConditionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getValueAssignment_2_0()); }
(rule__BinaryCondition__ValueAssignment_2_0)
{ after(grammarAccess.getBinaryConditionAccess().getValueAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getBinaryConditionAccess().getParamAssignment_2_1()); }
(rule__BinaryCondition__ParamAssignment_2_1)
{ after(grammarAccess.getBinaryConditionAccess().getParamAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elem__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElemAccess().getGetButtonParserRuleCall_0()); }
	ruleGetButton
{ after(grammarAccess.getElemAccess().getGetButtonParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElemAccess().getGetLinkParserRuleCall_1()); }
	ruleGetLink
{ after(grammarAccess.getElemAccess().getGetLinkParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElemAccess().getGetCheckboxParserRuleCall_2()); }
	ruleGetCheckbox
{ after(grammarAccess.getElemAccess().getGetCheckboxParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getElemAccess().getGetTextParserRuleCall_3()); }
	ruleGetText
{ after(grammarAccess.getElemAccess().getGetTextParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getElemAccess().getVariableParserRuleCall_4()); }
	ruleVariable
{ after(grammarAccess.getElemAccess().getVariableParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetButton__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonAccess().getValueAssignment_1_0()); }
(rule__GetButton__ValueAssignment_1_0)
{ after(grammarAccess.getGetButtonAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGetButtonAccess().getVarAssignment_1_1()); }
(rule__GetButton__VarAssignment_1_1)
{ after(grammarAccess.getGetButtonAccess().getVarAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetLink__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinkAccess().getValueAssignment_1_0()); }
(rule__GetLink__ValueAssignment_1_0)
{ after(grammarAccess.getGetLinkAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGetLinkAccess().getVarAssignment_1_1()); }
(rule__GetLink__VarAssignment_1_1)
{ after(grammarAccess.getGetLinkAccess().getVarAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckbox__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxAccess().getValueAssignment_1_0()); }
(rule__GetCheckbox__ValueAssignment_1_0)
{ after(grammarAccess.getGetCheckboxAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGetCheckboxAccess().getVarAssignment_1_1()); }
(rule__GetCheckbox__VarAssignment_1_1)
{ after(grammarAccess.getGetCheckboxAccess().getVarAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetText__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetTextAccess().getValueAssignment_1_0()); }
(rule__GetText__ValueAssignment_1_0)
{ after(grammarAccess.getGetTextAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGetTextAccess().getVarAssignment_1_1()); }
(rule__GetText__VarAssignment_1_1)
{ after(grammarAccess.getGetTextAccess().getVarAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Elems__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElemsAccess().getGetButtonsParserRuleCall_0()); }
	ruleGetButtons
{ after(grammarAccess.getElemsAccess().getGetButtonsParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getElemsAccess().getGetCheckboxesParserRuleCall_1()); }
	ruleGetCheckboxes
{ after(grammarAccess.getElemsAccess().getGetCheckboxesParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getElemsAccess().getGetLinksParserRuleCall_2()); }
	ruleGetLinks
{ after(grammarAccess.getElemsAccess().getGetLinksParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetButtons__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonsAccess().getValueAssignment_1_0()); }
(rule__GetButtons__ValueAssignment_1_0)
{ after(grammarAccess.getGetButtonsAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGetButtonsAccess().getVarAssignment_1_1()); }
(rule__GetButtons__VarAssignment_1_1)
{ after(grammarAccess.getGetButtonsAccess().getVarAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckboxes__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxesAccess().getValueAssignment_1_0()); }
(rule__GetCheckboxes__ValueAssignment_1_0)
{ after(grammarAccess.getGetCheckboxesAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGetCheckboxesAccess().getVarAssignment_1_1()); }
(rule__GetCheckboxes__VarAssignment_1_1)
{ after(grammarAccess.getGetCheckboxesAccess().getVarAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetLinks__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinksAccess().getValueAssignment_1_0()); }
(rule__GetLinks__ValueAssignment_1_0)
{ after(grammarAccess.getGetLinksAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getGetLinksAccess().getVarAssignment_1_1()); }
(rule__GetLinks__VarAssignment_1_1)
{ after(grammarAccess.getGetLinksAccess().getVarAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryOpAccess().getContainsEnumLiteralDeclaration_0()); }
(	'Contains' 
)
{ after(grammarAccess.getBinaryOpAccess().getContainsEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getBinaryOpAccess().getEqualsEnumLiteralDeclaration_1()); }
(	'Equals' 
)
{ after(grammarAccess.getBinaryOpAccess().getEqualsEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryOpAccess().getIsCheckedEnumLiteralDeclaration_0()); }
(	'IsChecked' 
)
{ after(grammarAccess.getUnaryOpAccess().getIsCheckedEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getUnaryOpAccess().getIsEnabledEnumLiteralDeclaration_1()); }
(	'IsEnabled' 
)
{ after(grammarAccess.getUnaryOpAccess().getIsEnabledEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getUnaryOpAccess().getExistsEnumLiteralDeclaration_2()); }
(	'Exists' 
)
{ after(grammarAccess.getUnaryOpAccess().getExistsEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Test__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__0__Impl
	rule__Test__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getTestKeyword_0()); }

	'Test' 

{ after(grammarAccess.getTestAccess().getTestKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__1__Impl
	rule__Test__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getBrowserAssignment_1()); }
(rule__Test__BrowserAssignment_1)
{ after(grammarAccess.getTestAccess().getBrowserAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__2__Impl
	rule__Test__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getTestAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__3__Impl
	rule__Test__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getBodyAssignment_3()); }
(rule__Test__BodyAssignment_3)*
{ after(grammarAccess.getTestAccess().getBodyAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Test__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Test__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Test__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getTestAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Sequence__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__0__Impl
	rule__Sequence__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getSequenceKeyword_0()); }

	'Sequence' 

{ after(grammarAccess.getSequenceAccess().getSequenceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__1__Impl
	rule__Sequence__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getNameAssignment_1()); }
(rule__Sequence__NameAssignment_1)
{ after(grammarAccess.getSequenceAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__2__Impl
	rule__Sequence__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getGroup_2()); }
(rule__Sequence__Group_2__0)?
{ after(grammarAccess.getSequenceAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__3__Impl
	rule__Sequence__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getSequenceAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__4__Impl
	rule__Sequence__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getBodyAssignment_4()); }
(rule__Sequence__BodyAssignment_4)*
{ after(grammarAccess.getSequenceAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getSequenceAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Sequence__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_2__0__Impl
	rule__Sequence__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getSequenceAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_2__1__Impl
	rule__Sequence__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getParametersAssignment_2_1()); }
(rule__Sequence__ParametersAssignment_2_1)
{ after(grammarAccess.getSequenceAccess().getParametersAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_2__2__Impl
	rule__Sequence__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getGroup_2_2()); }
(rule__Sequence__Group_2_2__0)*
{ after(grammarAccess.getSequenceAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getSequenceAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Sequence__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_2_2__0__Impl
	rule__Sequence__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getSequenceAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sequence__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sequence__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getParametersAssignment_2_2_1()); }
(rule__Sequence__ParametersAssignment_2_2_1)
{ after(grammarAccess.getSequenceAccess().getParametersAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ForAll__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__0__Impl
	rule__ForAll__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getForAllKeyword_0()); }

	'ForAll' 

{ after(grammarAccess.getForAllAccess().getForAllKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__1__Impl
	rule__ForAll__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getElemsAssignment_1()); }
(rule__ForAll__ElemsAssignment_1)
{ after(grammarAccess.getForAllAccess().getElemsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__2__Impl
	rule__ForAll__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getItAssignment_2()); }
(rule__ForAll__ItAssignment_2)
{ after(grammarAccess.getForAllAccess().getItAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__3__Impl
	rule__ForAll__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getForAllAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__4__Impl
	rule__ForAll__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getBodyAssignment_4()); }
(rule__ForAll__BodyAssignment_4)*
{ after(grammarAccess.getForAllAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForAll__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForAll__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getForAllAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DoWhile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhile__Group__0__Impl
	rule__DoWhile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileAccess().getDoKeyword_0()); }

	'Do {' 

{ after(grammarAccess.getDoWhileAccess().getDoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhile__Group__1__Impl
	rule__DoWhile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileAccess().getBodyAssignment_1()); }
(rule__DoWhile__BodyAssignment_1)*
{ after(grammarAccess.getDoWhileAccess().getBodyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhile__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhile__Group__2__Impl
	rule__DoWhile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileAccess().getWhileKeyword_2()); }

	'} While (' 

{ after(grammarAccess.getDoWhileAccess().getWhileKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhile__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhile__Group__3__Impl
	rule__DoWhile__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileAccess().getConditionAssignment_3()); }
(rule__DoWhile__ConditionAssignment_3)
{ after(grammarAccess.getDoWhileAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DoWhile__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DoWhile__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getDoWhileAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IfThenElse__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__0__Impl
	rule__IfThenElse__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }

	'If' 

{ after(grammarAccess.getIfThenElseAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__1__Impl
	rule__IfThenElse__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getConditionAssignment_1()); }
(rule__IfThenElse__ConditionAssignment_1)
{ after(grammarAccess.getIfThenElseAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__2__Impl
	rule__IfThenElse__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getLeftCurlyBracketKeyword_2()); }

	'{' 

{ after(grammarAccess.getIfThenElseAccess().getLeftCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__3__Impl
	rule__IfThenElse__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenAssignment_3()); }
(rule__IfThenElse__ThenAssignment_3)*
{ after(grammarAccess.getIfThenElseAccess().getThenAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__4__Impl
	rule__IfThenElse__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getRightCurlyBracketKeyword_4()); }

	'}' 

{ after(grammarAccess.getIfThenElseAccess().getRightCurlyBracketKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getGroup_5()); }
(rule__IfThenElse__Group_5__0)?
{ after(grammarAccess.getIfThenElseAccess().getGroup_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__IfThenElse__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_5__0__Impl
	rule__IfThenElse__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseKeyword_5_0()); }

	'Else {' 

{ after(grammarAccess.getIfThenElseAccess().getElseKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_5__1__Impl
	rule__IfThenElse__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseAssignment_5_1()); }
(rule__IfThenElse__ElseAssignment_5_1)*
{ after(grammarAccess.getIfThenElseAccess().getElseAssignment_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfThenElse__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfThenElse__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getRightCurlyBracketKeyword_5_2()); }

	'}' 

{ after(grammarAccess.getIfThenElseAccess().getRightCurlyBracketKeyword_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Affectation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Affectation__Group__0__Impl
	rule__Affectation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getVariableAssignment_0()); }
(rule__Affectation__VariableAssignment_0)
{ after(grammarAccess.getAffectationAccess().getVariableAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Affectation__Group__1__Impl
	rule__Affectation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getEqualsSignKeyword_1()); }

	'=' 

{ after(grammarAccess.getAffectationAccess().getEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Affectation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Affectation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getElemAssignment_2()); }
(rule__Affectation__ElemAssignment_2)
{ after(grammarAccess.getAffectationAccess().getElemAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Exec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group__0__Impl
	rule__Exec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getExecKeyword_0()); }

	'Exec' 

{ after(grammarAccess.getExecAccess().getExecKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group__1__Impl
	rule__Exec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getSequenceAssignment_1()); }
(rule__Exec__SequenceAssignment_1)
{ after(grammarAccess.getExecAccess().getSequenceAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exec__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getGroup_2()); }
(rule__Exec__Group_2__0)?
{ after(grammarAccess.getExecAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Exec__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group_2__0__Impl
	rule__Exec__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getExecAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exec__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group_2__1__Impl
	rule__Exec__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getParamsAssignment_2_1()); }
(rule__Exec__ParamsAssignment_2_1)
{ after(grammarAccess.getExecAccess().getParamsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exec__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group_2__2__Impl
	rule__Exec__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getGroup_2_2()); }
(rule__Exec__Group_2_2__0)*
{ after(grammarAccess.getExecAccess().getGroup_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exec__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getRightParenthesisKeyword_2_3()); }

	')' 

{ after(grammarAccess.getExecAccess().getRightParenthesisKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Exec__Group_2_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group_2_2__0__Impl
	rule__Exec__Group_2_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group_2_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getCommaKeyword_2_2_0()); }

	',' 

{ after(grammarAccess.getExecAccess().getCommaKeyword_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exec__Group_2_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exec__Group_2_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__Group_2_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getParamsAssignment_2_2_1()); }
(rule__Exec__ParamsAssignment_2_2_1)
{ after(grammarAccess.getExecAccess().getParamsAssignment_2_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fill__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__0__Impl
	rule__Fill__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFillKeyword_0()); }

	'Fill' 

{ after(grammarAccess.getFillAccess().getFillKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__1__Impl
	rule__Fill__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFieldAssignment_1()); }
(rule__Fill__FieldAssignment_1)
{ after(grammarAccess.getFillAccess().getFieldAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__2__Impl
	rule__Fill__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getWithKeyword_2()); }

	'with' 

{ after(grammarAccess.getFillAccess().getWithKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fill__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fill__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getAlternatives_3()); }
(rule__Fill__Alternatives_3)
{ after(grammarAccess.getFillAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Check__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__0__Impl
	rule__Check__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckKeyword_0()); }

	'Check' 

{ after(grammarAccess.getCheckAccess().getCheckKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Check__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Check__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Check__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckboxAssignment_1()); }
(rule__Check__CheckboxAssignment_1)
{ after(grammarAccess.getCheckAccess().getCheckboxAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Click__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Click__Group__0__Impl
	rule__Click__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickAccess().getClickKeyword_0()); }

	'Click' 

{ after(grammarAccess.getClickAccess().getClickKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Click__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Click__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Click__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickAccess().getElemAssignment_1()); }
(rule__Click__ElemAssignment_1)
{ after(grammarAccess.getClickAccess().getElemAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Verify__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Verify__Group__0__Impl
	rule__Verify__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }

	'Verify' 

{ after(grammarAccess.getVerifyAccess().getVerifyKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Verify__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Verify__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getConditionAssignment_1()); }
(rule__Verify__ConditionAssignment_1)
{ after(grammarAccess.getVerifyAccess().getConditionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GoTo__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoTo__Group__0__Impl
	rule__GoTo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getGoToKeyword_0()); }

	'GoTo' 

{ after(grammarAccess.getGoToAccess().getGoToKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GoTo__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GoTo__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getAlternatives_1()); }
(rule__GoTo__Alternatives_1)
{ after(grammarAccess.getGoToAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Condition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getNotKeyword_0()); }
(
	'Not' 
)?
{ after(grammarAccess.getConditionAccess().getNotKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getAlternatives_1()); }
(rule__Condition__Alternatives_1)
{ after(grammarAccess.getConditionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__UnaryCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryCondition__Group__0__Impl
	rule__UnaryCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConditionAccess().getOpAssignment_0()); }
(rule__UnaryCondition__OpAssignment_0)
{ after(grammarAccess.getUnaryConditionAccess().getOpAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UnaryCondition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConditionAccess().getElemAssignment_1()); }
(rule__UnaryCondition__ElemAssignment_1)
{ after(grammarAccess.getUnaryConditionAccess().getElemAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BinaryCondition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryCondition__Group__0__Impl
	rule__BinaryCondition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getElemAssignment_0()); }
(rule__BinaryCondition__ElemAssignment_0)
{ after(grammarAccess.getBinaryConditionAccess().getElemAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryCondition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryCondition__Group__1__Impl
	rule__BinaryCondition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getOpAssignment_1()); }
(rule__BinaryCondition__OpAssignment_1)
{ after(grammarAccess.getBinaryConditionAccess().getOpAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryCondition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BinaryCondition__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getAlternatives_2()); }
(rule__BinaryCondition__Alternatives_2)
{ after(grammarAccess.getBinaryConditionAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GetButton__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetButton__Group__0__Impl
	rule__GetButton__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetButton__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonAccess().getGetButtonKeyword_0()); }

	'GetButton' 

{ after(grammarAccess.getGetButtonAccess().getGetButtonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetButton__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetButton__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetButton__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonAccess().getAlternatives_1()); }
(rule__GetButton__Alternatives_1)
{ after(grammarAccess.getGetButtonAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GetLink__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetLink__Group__0__Impl
	rule__GetLink__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetLink__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinkAccess().getGetLinkKeyword_0()); }

	'GetLink' 

{ after(grammarAccess.getGetLinkAccess().getGetLinkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetLink__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetLink__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetLink__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinkAccess().getAlternatives_1()); }
(rule__GetLink__Alternatives_1)
{ after(grammarAccess.getGetLinkAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GetCheckbox__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetCheckbox__Group__0__Impl
	rule__GetCheckbox__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckbox__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxAccess().getGetCheckboxKeyword_0()); }

	'GetCheckbox' 

{ after(grammarAccess.getGetCheckboxAccess().getGetCheckboxKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetCheckbox__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetCheckbox__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckbox__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxAccess().getAlternatives_1()); }
(rule__GetCheckbox__Alternatives_1)
{ after(grammarAccess.getGetCheckboxAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GetText__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetText__Group__0__Impl
	rule__GetText__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetText__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetTextAccess().getGetTextKeyword_0()); }

	'GetText' 

{ after(grammarAccess.getGetTextAccess().getGetTextKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetText__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetText__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetText__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetTextAccess().getAlternatives_1()); }
(rule__GetText__Alternatives_1)
{ after(grammarAccess.getGetTextAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GetButtons__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetButtons__Group__0__Impl
	rule__GetButtons__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetButtons__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonsAccess().getGetButtonsKeyword_0()); }

	'GetButtons' 

{ after(grammarAccess.getGetButtonsAccess().getGetButtonsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetButtons__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetButtons__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetButtons__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonsAccess().getAlternatives_1()); }
(rule__GetButtons__Alternatives_1)?
{ after(grammarAccess.getGetButtonsAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GetCheckboxes__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetCheckboxes__Group__0__Impl
	rule__GetCheckboxes__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckboxes__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxesAccess().getGetCheckboxesKeyword_0()); }

	'GetCheckboxes' 

{ after(grammarAccess.getGetCheckboxesAccess().getGetCheckboxesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetCheckboxes__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetCheckboxes__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckboxes__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxesAccess().getAlternatives_1()); }
(rule__GetCheckboxes__Alternatives_1)?
{ after(grammarAccess.getGetCheckboxesAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GetLinks__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetLinks__Group__0__Impl
	rule__GetLinks__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetLinks__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinksAccess().getGetLinksKeyword_0()); }

	'GetLinks' 

{ after(grammarAccess.getGetLinksAccess().getGetLinksKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetLinks__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetLinks__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetLinks__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinksAccess().getAlternatives_1()); }
(rule__GetLinks__Alternatives_1)?
{ after(grammarAccess.getGetLinksAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Program__SequencesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getSequencesSequenceParserRuleCall_0_0()); }
	ruleSequence{ after(grammarAccess.getProgramAccess().getSequencesSequenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__TestsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getTestsTestParserRuleCall_1_0()); }
	ruleTest{ after(grammarAccess.getProgramAccess().getTestsTestParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__BrowserAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getBrowserSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getTestAccess().getBrowserSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Test__BodyAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getBodyInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getTestAccess().getBodyInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getSequenceAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__ParametersAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getParametersVariableParserRuleCall_2_1_0()); }
	ruleVariable{ after(grammarAccess.getSequenceAccess().getParametersVariableParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__ParametersAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getParametersVariableParserRuleCall_2_2_1_0()); }
	ruleVariable{ after(grammarAccess.getSequenceAccess().getParametersVariableParserRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sequence__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceAccess().getBodyInstructionParserRuleCall_4_0()); }
	ruleInstruction{ after(grammarAccess.getSequenceAccess().getBodyInstructionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__ElemsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getElemsElemsParserRuleCall_1_0()); }
	ruleElems{ after(grammarAccess.getForAllAccess().getElemsElemsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__ItAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getItVariableParserRuleCall_2_0()); }
	ruleVariable{ after(grammarAccess.getForAllAccess().getItVariableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForAll__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForAllAccess().getBodyInstructionParserRuleCall_4_0()); }
	ruleInstruction{ after(grammarAccess.getForAllAccess().getBodyInstructionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__BodyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileAccess().getBodyInstructionParserRuleCall_1_0()); }
	ruleInstruction{ after(grammarAccess.getDoWhileAccess().getBodyInstructionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoWhile__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoWhileAccess().getConditionConditionParserRuleCall_3_0()); }
	ruleCondition{ after(grammarAccess.getDoWhileAccess().getConditionConditionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getConditionConditionParserRuleCall_1_0()); }
	ruleCondition{ after(grammarAccess.getIfThenElseAccess().getConditionConditionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ThenAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getThenInstructionParserRuleCall_3_0()); }
	ruleInstruction{ after(grammarAccess.getIfThenElseAccess().getThenInstructionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfThenElse__ElseAssignment_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfThenElseAccess().getElseInstructionParserRuleCall_5_1_0()); }
	ruleInstruction{ after(grammarAccess.getIfThenElseAccess().getElseInstructionParserRuleCall_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__VariableAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_0_0()); }
	ruleVariable{ after(grammarAccess.getAffectationAccess().getVariableVariableParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Affectation__ElemAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAffectationAccess().getElemElemParserRuleCall_2_0()); }
	ruleElem{ after(grammarAccess.getAffectationAccess().getElemElemParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__SequenceAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getSequenceSequenceCrossReference_1_0()); }
(
{ before(grammarAccess.getExecAccess().getSequenceSequenceIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getExecAccess().getSequenceSequenceIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getExecAccess().getSequenceSequenceCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__ParamsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getParamsSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getExecAccess().getParamsSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Exec__ParamsAssignment_2_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExecAccess().getParamsSTRINGTerminalRuleCall_2_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getExecAccess().getParamsSTRINGTerminalRuleCall_2_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__FieldAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getFieldSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getFillAccess().getFieldSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__ValueAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getValueSTRINGTerminalRuleCall_3_0_0()); }
	RULE_STRING{ after(grammarAccess.getFillAccess().getValueSTRINGTerminalRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fill__ParamAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFillAccess().getParamVariableCrossReference_3_1_0()); }
(
{ before(grammarAccess.getFillAccess().getParamVariableIDTerminalRuleCall_3_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFillAccess().getParamVariableIDTerminalRuleCall_3_1_0_1()); }
)
{ after(grammarAccess.getFillAccess().getParamVariableCrossReference_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Check__CheckboxAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCheckAccess().getCheckboxAlternatives_1_0()); }
(rule__Check__CheckboxAlternatives_1_0)
{ after(grammarAccess.getCheckAccess().getCheckboxAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Click__ElemAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClickAccess().getElemElemCrossReference_1_0()); }
(
{ before(grammarAccess.getClickAccess().getElemElemIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getClickAccess().getElemElemIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getClickAccess().getElemElemCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Verify__ConditionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVerifyAccess().getConditionConditionParserRuleCall_1_0()); }
	ruleCondition{ after(grammarAccess.getVerifyAccess().getConditionConditionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGoToAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GoTo__LinkAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGoToAccess().getLinkAlternatives_1_1_0()); }
(rule__GoTo__LinkAlternatives_1_1_0)
{ after(grammarAccess.getGoToAccess().getLinkAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryCondition__OpAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConditionAccess().getOpUnaryOpEnumRuleCall_0_0()); }
	ruleUnaryOp{ after(grammarAccess.getUnaryConditionAccess().getOpUnaryOpEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryCondition__ElemAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnaryConditionAccess().getElemElemCrossReference_1_0()); }
(
{ before(grammarAccess.getUnaryConditionAccess().getElemElemIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getUnaryConditionAccess().getElemElemIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getUnaryConditionAccess().getElemElemCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__ElemAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getElemElemParserRuleCall_0_0()); }
	ruleElem{ after(grammarAccess.getBinaryConditionAccess().getElemElemParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__OpAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getOpBinaryOpEnumRuleCall_1_0()); }
	ruleBinaryOp{ after(grammarAccess.getBinaryConditionAccess().getOpBinaryOpEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__ValueAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getValueSTRINGTerminalRuleCall_2_0_0()); }
	RULE_STRING{ after(grammarAccess.getBinaryConditionAccess().getValueSTRINGTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryCondition__ParamAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBinaryConditionAccess().getParamVariableCrossReference_2_1_0()); }
(
{ before(grammarAccess.getBinaryConditionAccess().getParamVariableIDTerminalRuleCall_2_1_0_1()); }
	RULE_ID{ after(grammarAccess.getBinaryConditionAccess().getParamVariableIDTerminalRuleCall_2_1_0_1()); }
)
{ after(grammarAccess.getBinaryConditionAccess().getParamVariableCrossReference_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetButton__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGetButtonAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetButton__VarAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonAccess().getVarVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getGetButtonAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGetButtonAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getGetButtonAccess().getVarVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetLink__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinkAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGetLinkAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetLink__VarAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinkAccess().getVarVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getGetLinkAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGetLinkAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getGetLinkAccess().getVarVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckbox__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGetCheckboxAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckbox__VarAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxAccess().getVarVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getGetCheckboxAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGetCheckboxAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getGetCheckboxAccess().getVarVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetText__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetTextAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGetTextAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetText__VarAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetTextAccess().getVarVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getGetTextAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGetTextAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getGetTextAccess().getVarVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetButtons__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonsAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGetButtonsAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetButtons__VarAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetButtonsAccess().getVarVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getGetButtonsAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGetButtonsAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getGetButtonsAccess().getVarVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckboxes__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxesAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGetCheckboxesAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetCheckboxes__VarAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetCheckboxesAccess().getVarVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getGetCheckboxesAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGetCheckboxesAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getGetCheckboxesAccess().getVarVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetLinks__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinksAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
	RULE_STRING{ after(grammarAccess.getGetLinksAccess().getValueSTRINGTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetLinks__VarAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetLinksAccess().getVarVariableCrossReference_1_1_0()); }
(
{ before(grammarAccess.getGetLinksAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getGetLinksAccess().getVarVariableIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getGetLinksAccess().getVarVariableCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



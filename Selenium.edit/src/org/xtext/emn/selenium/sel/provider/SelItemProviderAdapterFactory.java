/**
 */
package org.xtext.emn.selenium.sel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.xtext.emn.selenium.sel.util.SelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SelItemProviderAdapterFactory extends SelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Program} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProgramItemProvider programItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Program}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProgramAdapter() {
		if (programItemProvider == null) {
			programItemProvider = new ProgramItemProvider(this);
		}

		return programItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Test} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TestItemProvider testItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Test}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTestAdapter() {
		if (testItemProvider == null) {
			testItemProvider = new TestItemProvider(this);
		}

		return testItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Sequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceItemProvider sequenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Sequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSequenceAdapter() {
		if (sequenceItemProvider == null) {
			sequenceItemProvider = new SequenceItemProvider(this);
		}

		return sequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Instruction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionItemProvider instructionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Instruction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionAdapter() {
		if (instructionItemProvider == null) {
			instructionItemProvider = new InstructionItemProvider(this);
		}

		return instructionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.ForAll} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForAllItemProvider forAllItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.ForAll}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForAllAdapter() {
		if (forAllItemProvider == null) {
			forAllItemProvider = new ForAllItemProvider(this);
		}

		return forAllItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.DoWhile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoWhileItemProvider doWhileItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.DoWhile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDoWhileAdapter() {
		if (doWhileItemProvider == null) {
			doWhileItemProvider = new DoWhileItemProvider(this);
		}

		return doWhileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.IfThenElse} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfThenElseItemProvider ifThenElseItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.IfThenElse}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfThenElseAdapter() {
		if (ifThenElseItemProvider == null) {
			ifThenElseItemProvider = new IfThenElseItemProvider(this);
		}

		return ifThenElseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Affectation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AffectationItemProvider affectationItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Affectation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAffectationAdapter() {
		if (affectationItemProvider == null) {
			affectationItemProvider = new AffectationItemProvider(this);
		}

		return affectationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Exec} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExecItemProvider execItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Exec}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExecAdapter() {
		if (execItemProvider == null) {
			execItemProvider = new ExecItemProvider(this);
		}

		return execItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Fill} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FillItemProvider fillItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Fill}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFillAdapter() {
		if (fillItemProvider == null) {
			fillItemProvider = new FillItemProvider(this);
		}

		return fillItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Check} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckItemProvider checkItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Check}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckAdapter() {
		if (checkItemProvider == null) {
			checkItemProvider = new CheckItemProvider(this);
		}

		return checkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Click} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClickItemProvider clickItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Click}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClickAdapter() {
		if (clickItemProvider == null) {
			clickItemProvider = new ClickItemProvider(this);
		}

		return clickItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GoTo} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoToItemProvider goToItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GoTo}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoToAdapter() {
		if (goToItemProvider == null) {
			goToItemProvider = new GoToItemProvider(this);
		}

		return goToItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Verify} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerifyItemProvider verifyItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Verify}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerifyAdapter() {
		if (verifyItemProvider == null) {
			verifyItemProvider = new VerifyItemProvider(this);
		}

		return verifyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.NotCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotConditionItemProvider notConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.NotCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotConditionAdapter() {
		if (notConditionItemProvider == null) {
			notConditionItemProvider = new NotConditionItemProvider(this);
		}

		return notConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.UnaryCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryConditionItemProvider unaryConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.UnaryCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryConditionAdapter() {
		if (unaryConditionItemProvider == null) {
			unaryConditionItemProvider = new UnaryConditionItemProvider(this);
		}

		return unaryConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.BinaryCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryConditionItemProvider binaryConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.BinaryCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryConditionAdapter() {
		if (binaryConditionItemProvider == null) {
			binaryConditionItemProvider = new BinaryConditionItemProvider(this);
		}

		return binaryConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Expression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExpressionItemProvider expressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Expression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExpressionAdapter() {
		if (expressionItemProvider == null) {
			expressionItemProvider = new ExpressionItemProvider(this);
		}

		return expressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetButtonItemProvider getButtonItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetButtonAdapter() {
		if (getButtonItemProvider == null) {
			getButtonItemProvider = new GetButtonItemProvider(this);
		}

		return getButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetLink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetLinkItemProvider getLinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetLink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetLinkAdapter() {
		if (getLinkItemProvider == null) {
			getLinkItemProvider = new GetLinkItemProvider(this);
		}

		return getLinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetCheckbox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetCheckboxItemProvider getCheckboxItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetCheckbox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetCheckboxAdapter() {
		if (getCheckboxItemProvider == null) {
			getCheckboxItemProvider = new GetCheckboxItemProvider(this);
		}

		return getCheckboxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetTextItemProvider getTextItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetTextAdapter() {
		if (getTextItemProvider == null) {
			getTextItemProvider = new GetTextItemProvider(this);
		}

		return getTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetInputItemProvider getInputItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetInputAdapter() {
		if (getInputItemProvider == null) {
			getInputItemProvider = new GetInputItemProvider(this);
		}

		return getInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.Elems} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElemsItemProvider elemsItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.Elems}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElemsAdapter() {
		if (elemsItemProvider == null) {
			elemsItemProvider = new ElemsItemProvider(this);
		}

		return elemsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetButtons} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetButtonsItemProvider getButtonsItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetButtons}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetButtonsAdapter() {
		if (getButtonsItemProvider == null) {
			getButtonsItemProvider = new GetButtonsItemProvider(this);
		}

		return getButtonsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetCheckboxes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetCheckboxesItemProvider getCheckboxesItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetCheckboxes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetCheckboxesAdapter() {
		if (getCheckboxesItemProvider == null) {
			getCheckboxesItemProvider = new GetCheckboxesItemProvider(this);
		}

		return getCheckboxesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.xtext.emn.selenium.sel.GetLinks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetLinksItemProvider getLinksItemProvider;

	/**
	 * This creates an adapter for a {@link org.xtext.emn.selenium.sel.GetLinks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetLinksAdapter() {
		if (getLinksItemProvider == null) {
			getLinksItemProvider = new GetLinksItemProvider(this);
		}

		return getLinksItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (programItemProvider != null) programItemProvider.dispose();
		if (testItemProvider != null) testItemProvider.dispose();
		if (sequenceItemProvider != null) sequenceItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (instructionItemProvider != null) instructionItemProvider.dispose();
		if (forAllItemProvider != null) forAllItemProvider.dispose();
		if (doWhileItemProvider != null) doWhileItemProvider.dispose();
		if (ifThenElseItemProvider != null) ifThenElseItemProvider.dispose();
		if (affectationItemProvider != null) affectationItemProvider.dispose();
		if (execItemProvider != null) execItemProvider.dispose();
		if (fillItemProvider != null) fillItemProvider.dispose();
		if (checkItemProvider != null) checkItemProvider.dispose();
		if (clickItemProvider != null) clickItemProvider.dispose();
		if (goToItemProvider != null) goToItemProvider.dispose();
		if (verifyItemProvider != null) verifyItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (notConditionItemProvider != null) notConditionItemProvider.dispose();
		if (unaryConditionItemProvider != null) unaryConditionItemProvider.dispose();
		if (binaryConditionItemProvider != null) binaryConditionItemProvider.dispose();
		if (expressionItemProvider != null) expressionItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (getButtonItemProvider != null) getButtonItemProvider.dispose();
		if (getLinkItemProvider != null) getLinkItemProvider.dispose();
		if (getCheckboxItemProvider != null) getCheckboxItemProvider.dispose();
		if (getTextItemProvider != null) getTextItemProvider.dispose();
		if (getInputItemProvider != null) getInputItemProvider.dispose();
		if (elemsItemProvider != null) elemsItemProvider.dispose();
		if (getButtonsItemProvider != null) getButtonsItemProvider.dispose();
		if (getCheckboxesItemProvider != null) getCheckboxesItemProvider.dispose();
		if (getLinksItemProvider != null) getLinksItemProvider.dispose();
	}

}
